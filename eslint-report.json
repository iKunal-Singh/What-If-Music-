[{"filePath":"/app/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Navigate' is defined but never used.","line":6,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":48},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":36,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":36,"endColumn":22,"suggestions":[{"fix":{"range":[1221,1277],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\nimport { AuthProvider, RequireAuth } from \"@/context/AuthContext\";\nimport { useEffect } from \"react\";\nimport { initializeStorage } from \"@/integrations/supabase/client\";\nimport Index from \"./pages/Index\";\nimport Auth from \"./pages/Auth\";\nimport Beats from \"./pages/Beats\";\nimport Remixes from \"./pages/Remixes\";\nimport CoverArt from \"./pages/CoverArt\";\nimport About from \"./pages/About\";\nimport NotFound from \"./pages/NotFound\";\nimport Dashboard from \"./pages/Dashboard\";\nimport UIEffects from \"./components/effects/UIEffects\";\nimport ButtonEffects from \"./components/effects/ButtonEffects\";\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 1,\n      refetchOnWindowFocus: false,\n    },\n  },\n});\n\nconst App = () => {\n  // Initialize storage buckets on app start\n  useEffect(() => {\n    initializeStorage()\n      .then(success => {\n        if (success) {\n          console.log(\"Storage buckets initialized successfully\");\n        }\n      })\n      .catch(error => {\n        console.error(\"Error initializing storage buckets:\", error);\n      });\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Sonner />\n          <BrowserRouter>\n            <UIEffects />\n            <ButtonEffects />\n            <Routes>\n              <Route path=\"/\" element={<Index />} />\n              <Route path=\"/auth\" element={<Auth />} />\n              <Route path=\"/beats\" element={<Beats />} />\n              <Route path=\"/remixes\" element={<Remixes />} />\n              <Route path=\"/cover-art\" element={<CoverArt />} />\n              <Route path=\"/about\" element={<About />} />\n              <Route path=\"/dashboard\" element={\n                <RequireAuth>\n                  <Dashboard />\n                </RequireAuth>\n              } />\n              <Route path=\"*\" element={<NotFound />} />\n            </Routes>\n          </BrowserRouter>\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/auth/LoginForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1479,1482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1479,1482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Mail, Lock, Eye, EyeOff } from \"lucide-react\";\nimport { useAuthContext } from \"@/context/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormMessage } from \"@/components/ui/form\";\nimport { toast } from \"sonner\";\nimport * as z from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nconst formSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype LoginFormValues = z.infer<typeof formSchema>;\n\ntype LoginFormProps = {\n  redirectPath?: string;\n};\n\nexport default function LoginForm({ redirectPath = \"/dashboard\" }: LoginFormProps) {\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { signIn } = useAuthContext();\n  const navigate = useNavigate();\n  \n  const form = useForm<LoginFormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginFormValues) => {\n    try {\n      setIsLoading(true);\n      const { error } = await signIn(data.email, data.password);\n      if (error) throw error;\n      navigate(redirectPath);\n    } catch (error: any) {\n      toast.error(error.message || \"Failed to sign in\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormControl>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-2.5 h-5 w-5 text-muted-foreground\" />\n                  <Input placeholder=\"Email\" type=\"email\" className=\"pl-10\" {...field} />\n                </div>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormControl>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-2.5 h-5 w-5 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    className=\"pl-10\"\n                    {...field}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-2 top-2\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-5 w-5\" />\n                    ) : (\n                      <Eye className=\"h-5 w-5\" />\n                    )}\n                  </Button>\n                </div>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n          {isLoading ? \"Signing In...\" : \"Sign In\"}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/auth/SignUpForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1473,1476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1473,1476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Mail, Lock, User, Eye, EyeOff } from \"lucide-react\";\nimport { useAuthContext } from \"@/context/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormMessage } from \"@/components/ui/form\";\nimport { toast } from \"sonner\";\nimport * as z from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nconst formSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype SignUpFormValues = z.infer<typeof formSchema>;\n\nexport default function SignUpForm() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { signUp } = useAuthContext();\n  \n  const form = useForm<SignUpFormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: SignUpFormValues) => {\n    try {\n      setIsLoading(true);\n      const { error } = await signUp(data.email, data.password);\n      if (error) throw error;\n      toast.success(\"Account created successfully! Please check your email to confirm your account.\");\n    } catch (error: any) {\n      toast.error(error.message || \"Failed to create account\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormControl>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-2.5 h-5 w-5 text-muted-foreground\" />\n                  <Input placeholder=\"Email\" type=\"email\" className=\"pl-10\" {...field} />\n                </div>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormControl>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-2.5 h-5 w-5 text-muted-foreground\" />\n                  <Input placeholder=\"Username\" className=\"pl-10\" {...field} />\n                </div>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormControl>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-2.5 h-5 w-5 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    className=\"pl-10\"\n                    {...field}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-2 top-2\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-5 w-5\" />\n                    ) : (\n                      <Eye className=\"h-5 w-5\" />\n                    )}\n                  </Button>\n                </div>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n          {isLoading ? \"Creating Account...\" : \"Create Account\"}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/beats/BeatCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'toast' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Heart } from 'lucide-react';\nimport AudioPlayer from '../common/AudioPlayer';\nimport DownloadGate from '../common/DownloadGate';\nimport { toast } from '@/components/ui/use-toast';\n\ninterface BeatProps {\n  id: string;\n  title: string;\n  producer: string;\n  image: string;\n  audio: string;\n  bpm?: number;\n  key_signature?: string;\n  tags: string[];\n}\n\nconst BeatCard = ({ id, title, producer, image, audio, bpm, key_signature, tags }: BeatProps) => {\n  // Ensure tags is always an array\n  const safelyFormattedTags = Array.isArray(tags) ? tags : \n    (typeof tags === 'string' ? [tags] : []);\n  \n  return (\n    <Card className=\"overflow-hidden music-card\">\n      <div className=\"aspect-video relative overflow-hidden rounded-md mb-3\">\n        <img \n          src={image} \n          alt={title} \n          className=\"w-full h-full object-cover transition-transform duration-300 hover:scale-105\"\n        />\n        <div className=\"absolute bottom-2 right-2\">\n          <Button \n            variant=\"secondary\" \n            size=\"icon\" \n            className=\"rounded-full opacity-80 hover:opacity-100\"\n          >\n            <Heart size={16} className=\"text-beatwave-500\" />\n          </Button>\n        </div>\n      </div>\n      \n      <h3 className=\"font-medium truncate mb-1 text-sm\">{title}</h3>\n      <p className=\"text-xs text-muted-foreground mb-2\">by {producer}</p>\n      \n      <div className=\"flex flex-wrap gap-1 mb-2\">\n        {safelyFormattedTags.slice(0, 2).map((tag) => (\n          <span key={tag} className=\"beat-tag text-xs\">\n            {tag}\n          </span>\n        ))}\n      </div>\n      \n      <div className=\"flex items-center gap-2 text-xs text-muted-foreground mb-3\">\n        {bpm && (\n          <div className=\"flex items-center gap-1\">\n            <span className=\"font-medium\">BPM:</span> {bpm}\n          </div>\n        )}\n        {key_signature && (\n          <div className=\"flex items-center gap-1\">\n            <span className=\"font-medium\">Key:</span> {key_signature}\n          </div>\n        )}\n      </div>\n      \n      <AudioPlayer \n        audioUrl={audio}\n        title={title}\n        artist={producer}\n      />\n      \n      <div className=\"mt-3\">\n        <DownloadGate \n          title={title}\n          fileType=\"Beat\"\n          itemId={id}\n          itemType=\"beat\"\n          filePath={audio && audio.split('/').pop() || `${title.replace(/\\s+/g, '-').toLowerCase()}.mp3`}\n          bucket=\"beats\"\n        />\n      </div>\n    </Card>\n  );\n};\n\nexport default BeatCard;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/beats/BeatCardContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/common/APIErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/common/AdBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/common/AudioPlayer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'volume' is assigned a value but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleVolumeChange' is assigned a value but never used.","line":89,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Play, Pause, Volume2, VolumeX } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\n\ninterface AudioPlayerProps {\n  audioUrl: string;\n  title: string;\n  artist: string;\n  minimal?: boolean;\n}\n\nconst AudioPlayer = ({ audioUrl, title, artist, minimal = false }: AudioPlayerProps) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  // Initialize audio element\n  useEffect(() => {\n    // Create audio element\n    const audio = new Audio(audioUrl);\n    audioRef.current = audio;\n    \n    // Set up event listeners\n    audio.addEventListener('loadedmetadata', () => {\n      setDuration(audio.duration);\n    });\n    \n    audio.addEventListener('timeupdate', () => {\n      setCurrentTime(audio.currentTime);\n      setProgress((audio.currentTime / audio.duration) * 100);\n    });\n    \n    audio.addEventListener('ended', () => {\n      setIsPlaying(false);\n      setProgress(0);\n      setCurrentTime(0);\n    });\n\n    // Clean up\n    return () => {\n      audio.pause();\n      audio.src = '';\n      audio.removeEventListener('loadedmetadata', () => {});\n      audio.removeEventListener('timeupdate', () => {});\n      audio.removeEventListener('ended', () => {});\n    };\n  }, [audioUrl]);\n\n  // Handle play/pause\n  const togglePlay = () => {\n    if (!audioRef.current) return;\n    \n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play().catch(error => {\n        console.error(\"Error playing audio:\", error);\n      });\n    }\n    \n    setIsPlaying(!isPlaying);\n  };\n\n  // Handle mute toggle\n  const toggleMute = () => {\n    if (!audioRef.current) return;\n    \n    audioRef.current.muted = !isMuted;\n    setIsMuted(!isMuted);\n  };\n\n  // Handle seek\n  const handleSeek = (value: number) => {\n    if (!audioRef.current) return;\n    \n    const seekTime = (value / 100) * duration;\n    audioRef.current.currentTime = seekTime;\n    setProgress(value);\n    setCurrentTime(seekTime);\n  };\n\n  // Handle volume change\n  const handleVolumeChange = (value: number) => {\n    if (!audioRef.current) return;\n    \n    audioRef.current.volume = value / 100;\n    setVolume(value / 100);\n    \n    // If volume is set to 0, mute; if unmuting, set volume back\n    if (value === 0) {\n      setIsMuted(true);\n      audioRef.current.muted = true;\n    } else if (isMuted) {\n      setIsMuted(false);\n      audioRef.current.muted = false;\n    }\n  };\n\n  // Wave animation bars (shown when playing)\n  const WaveAnimation = () => (\n    <div className={`flex items-end h-6 gap-[1px] wave-animations ${minimal ? 'w-12' : 'w-20'}`}>\n      {[...Array(5)].map((_, i) => (\n        <div \n          key={i} \n          className={`audio-bar ${isPlaying ? 'animate-wave' : 'h-1/3'}`} \n        />\n      ))}\n    </div>\n  );\n\n  if (minimal) {\n    return (\n      <div className=\"flex items-center gap-2\">\n        <Button \n          variant=\"outline\" \n          size=\"icon\" \n          className=\"h-8 w-8 rounded-full\" \n          onClick={togglePlay}\n        >\n          {isPlaying ? <Pause size={14} /> : <Play size={14} />}\n        </Button>\n        <WaveAnimation />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-3 w-full\">\n      <div className=\"flex items-center gap-3\">\n        <Button \n          variant=\"default\" \n          size=\"icon\" \n          className=\"h-10 w-10 rounded-full bg-beatwave-500 hover:bg-beatwave-400\" \n          onClick={togglePlay}\n        >\n          {isPlaying ? <Pause size={16} /> : <Play size={16} />}\n        </Button>\n        \n        <div className=\"flex-1\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"truncate\">\n              <div className=\"font-medium truncate\">{title}</div>\n              <div className=\"text-xs text-muted-foreground\">{artist}</div>\n            </div>\n            <WaveAnimation />\n          </div>\n          \n          <div className=\"mt-2\">\n            <Slider\n              value={[progress]}\n              max={100}\n              step={1}\n              className=\"cursor-pointer\"\n              onValueChange={(val) => handleSeek(val[0])}\n            />\n          </div>\n          \n          <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n            <span>{formatTime(currentTime)}</span>\n            <div className=\"flex items-center gap-2\">\n              <Button \n                variant=\"ghost\" \n                size=\"icon\" \n                className=\"h-6 w-6\" \n                onClick={toggleMute}\n              >\n                {isMuted ? <VolumeX size={12} /> : <Volume2 size={12} />}\n              </Button>\n              <span>{formatTime(duration)}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction formatTime(seconds: number): string {\n  const mins = Math.floor(seconds / 60);\n  const secs = Math.floor(seconds % 60);\n  return `${mins}:${secs < 10 ? '0' : ''}${secs}`;\n}\n\nexport default AudioPlayer;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/common/ContentSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/common/CookieConsent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/common/DonateModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/common/DownloadGate.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fileType' is defined but never used.","line":19,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Download, Eye, Mail } from 'lucide-react';\nimport AdBanner from './AdBanner';\nimport { useToast } from '@/hooks/use-toast';\nimport { getDownloadURL, recordDownload, subscribeToNewsletter } from '@/lib/api';\n\nexport interface DownloadGateProps {\n  title: string;\n  fileType: string;\n  itemId: string;\n  itemType: 'beat' | 'remix' | 'cover_art';\n  filePath: string;\n  bucket: string;\n}\n\nconst DownloadGate = ({ title, fileType, itemId, itemType, filePath, bucket }: DownloadGateProps) => {\n  const [open, setOpen] = useState(false);\n  const [method, setMethod] = useState<'ad' | 'email'>('ad');\n  const [email, setEmail] = useState('');\n  const [adViewed, setAdViewed] = useState(false);\n  const [adTimer, setAdTimer] = useState(5);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleOpen = () => {\n    setOpen(true);\n    if (method === 'ad') {\n      startAdTimer();\n    }\n  };\n\n  const startAdTimer = () => {\n    setAdViewed(false);\n    setAdTimer(5);\n    \n    const timer = setInterval(() => {\n      setAdTimer((prev) => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          setAdViewed(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  const handleDownload = async () => {\n    if (method === 'email' && !validateEmail(email)) {\n      toast({\n        title: \"Invalid email\",\n        description: \"Please enter a valid email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (method === 'ad' && !adViewed) {\n      toast({\n        title: \"Please wait\",\n        description: \"Please wait for the ad to finish\",\n      });\n      return;\n    }\n    \n    try {\n      setIsLoading(true);\n      \n      // If user chose email method, subscribe them to newsletter\n      if (method === 'email' && email) {\n        await subscribeToNewsletter(email);\n      }\n      \n      // Record the download\n      await recordDownload(itemId, itemType, method === 'email' ? email : undefined);\n      \n      // Get download URL\n      const downloadUrl = await getDownloadURL(bucket, filePath);\n      \n      // Trigger download\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.download = title;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      toast({\n        title: \"Download started\",\n        description: `${title} download has started`,\n      });\n      \n      setOpen(false);\n    } catch (error) {\n      console.error('Download error:', error);\n      toast({\n        title: \"Download failed\",\n        description: \"There was an error starting your download. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const validateEmail = (email: string) => {\n    return email.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\n  };\n\n  return (\n    <>\n      <Button onClick={handleOpen} className=\"flex gap-2\">\n        <Download size={18} />\n        Download\n      </Button>\n      \n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>{title}</DialogTitle>\n            <DialogDescription>\n              Support my work by choosing one of the options below to unlock your download.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"flex gap-4 mt-2 mb-4\">\n            <Button \n              variant={method === 'ad' ? 'default' : 'outline'} \n              className=\"flex-1\" \n              onClick={() => { \n                setMethod('ad');\n                startAdTimer();\n              }}\n            >\n              <Eye className=\"mr-2 h-4 w-4\" />\n              Watch Ad\n            </Button>\n            \n            <Button \n              variant={method === 'email' ? 'default' : 'outline'} \n              className=\"flex-1\" \n              onClick={() => setMethod('email')}\n            >\n              <Mail className=\"mr-2 h-4 w-4\" />\n              Subscribe\n            </Button>\n          </div>\n          \n          {method === 'ad' ? (\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-center text-muted-foreground\">\n                Please view this ad for {adTimer} seconds to unlock your download\n              </p>\n              <AdBanner type=\"content\" />\n              \n              <div className=\"flex items-center justify-center\">\n                <Button \n                  onClick={handleDownload} \n                  disabled={!adViewed || isLoading}\n                >\n                  {isLoading ? 'Processing...' : adViewed ? 'Download Now' : `Wait ${adTimer}s`}\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-center text-muted-foreground\">\n                Subscribe to my newsletter to unlock your download and receive updates about new beats\n              </p>\n              \n              <div className=\"grid gap-4\">\n                <Input\n                  type=\"email\"\n                  placeholder=\"Your email address\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n                <div className=\"flex items-center text-xs\">\n                  <input \n                    type=\"checkbox\" \n                    id=\"consent\"\n                    className=\"mr-2\" \n                    required\n                  />\n                  <label htmlFor=\"consent\" className=\"text-muted-foreground\">\n                    I agree to receive emails about new beats and exclusive offers\n                  </label>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <DialogFooter>\n            {method === 'email' && (\n              <Button onClick={handleDownload} disabled={isLoading}>\n                {isLoading ? 'Processing...' : 'Subscribe & Download'}\n              </Button>\n            )}\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n\nexport default DownloadGate;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/common/ErrorBoundary.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":51,"column":22,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1375,1461],"text":"\n            We couldn&apos;t load this content. Please try refreshing the page.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1375,1461],"text":"\n            We couldn&lsquo;t load this content. Please try refreshing the page.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1375,1461],"text":"\n            We couldn&#39;t load this content. Please try refreshing the page.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1375,1461],"text":"\n            We couldn&rsquo;t load this content. Please try refreshing the page.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { AlertCircle } from 'lucide-react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: (error: Error, resetErrorBoundary: () => void) => ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return {\n      hasError: true,\n      error\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    console.error(\"Error caught by ErrorBoundary:\", error, errorInfo);\n  }\n\n  resetErrorBoundary = (): void => {\n    this.setState({ hasError: false, error: null });\n  }\n\n  render(): ReactNode {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      if (this.props.fallback) {\n        return this.props.fallback(this.state.error!, this.resetErrorBoundary);\n      }\n      \n      return (\n        <div className=\"flex flex-col items-center justify-center p-6 border border-red-200 bg-red-50 rounded-md\">\n          <AlertCircle className=\"h-10 w-10 text-red-500 mb-4\" />\n          <h2 className=\"text-xl font-bold text-red-700 mb-2\">Something went wrong</h2>\n          <p className=\"text-red-600 mb-4\">\n            We couldn't load this content. Please try refreshing the page.\n          </p>\n          <button\n            onClick={() => window.location.reload()}\n            className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\n          >\n            Refresh Page\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/common/PageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/cover-art/ArtCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Download' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Download, Eye, X } from 'lucide-react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport DownloadGate from '../common/DownloadGate';\n\ninterface ArtProps {\n  id: string;\n  title: string;\n  artist: string;\n  image: string;\n  tags: string[];\n}\n\nconst ArtCard = ({ id, title, artist, image, tags }: ArtProps) => {\n  const [showPreview, setShowPreview] = useState(false);\n  \n  // File path would be the relative path within the storage bucket\n  const filePath = `${id}/${title.toLowerCase().replace(/\\s+/g, '-')}.jpg`;\n  \n  return (\n    <>\n      <Card className=\"overflow-hidden music-card group\">\n        <div className=\"aspect-square relative overflow-hidden rounded-md mb-3\">\n          <img \n            src={image} \n            alt={title} \n            className=\"w-full h-full object-cover\"\n          />\n          <div className=\"absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 flex items-center justify-center gap-2 transition-opacity duration-300\">\n            <Button \n              variant=\"secondary\" \n              size=\"sm\" \n              className=\"rounded-full\" \n              onClick={() => setShowPreview(true)}\n            >\n              <Eye size={16} className=\"mr-1\" />\n              Preview\n            </Button>\n          </div>\n        </div>\n        \n        <h3 className=\"font-medium truncate mb-1\">{title}</h3>\n        <p className=\"text-sm text-muted-foreground mb-3\">by {artist}</p>\n        \n        <div className=\"flex flex-wrap gap-1 mb-4\">\n          {tags.map((tag) => (\n            <span key={tag} className=\"beat-tag\">\n              {tag}\n            </span>\n          ))}\n        </div>\n        \n        <div>\n          <DownloadGate \n            title={title}\n            fileType=\"Cover Art\"\n            itemId={id}\n            itemType=\"cover_art\"\n            filePath={filePath}\n            bucket=\"cover_art\"\n          />\n        </div>\n      </Card>\n      \n      <Dialog open={showPreview} onOpenChange={setShowPreview}>\n        <DialogContent className=\"sm:max-w-[700px] p-1\">\n          <DialogHeader className=\"sr-only\">\n            <DialogTitle>{title}</DialogTitle>\n          </DialogHeader>\n          \n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"absolute right-2 top-2 z-50 rounded-full bg-black/50 hover:bg-black/70\" \n            onClick={() => setShowPreview(false)}\n          >\n            <X size={18} />\n          </Button>\n          \n          <div className=\"w-full\">\n            <img \n              src={image} \n              alt={title} \n              className=\"w-full h-auto object-contain rounded-md\" \n            />\n          </div>\n          \n          <div className=\"p-4\">\n            <h3 className=\"font-medium text-lg mb-1\">{title}</h3>\n            <p className=\"text-sm text-muted-foreground\">by {artist}</p>\n            \n            <div className=\"mt-4\">\n              <DownloadGate \n                title={title}\n                fileType=\"Cover Art (High Resolution)\"\n                itemId={id}\n                itemType=\"cover_art\"\n                filePath={filePath}\n                bucket=\"cover_art\"\n              />\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n\nexport default ArtCard;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/cover-art/ArtCardContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/dashboard/DashboardContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/dashboard/DashboardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/dashboard/DashboardOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/dashboard/DashboardSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/dashboard/DashboardUploads.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":2,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from '@/components/ui/badge';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { FileIcon, MusicIcon, ImageIcon, FileTextIcon, AlertCircle } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\n\ninterface Upload {\n  name: string;\n  type?: string;\n  size?: number;\n  created_at?: string;\n  id?: string;\n  metadata?: {\n    size?: number;\n    mimetype?: string;\n  };\n  last_modified?: string;\n}\n\ninterface FileListing {\n  bucket: string;\n  files: Upload[];\n}\n\nconst DashboardUploads = () => {\n  const fetchAllUploads = async (): Promise<FileListing[]> => {\n    try {\n      // Get all storage buckets\n      const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();\n      \n      if (bucketsError) {\n        throw bucketsError;\n      }\n      \n      if (!buckets || buckets.length === 0) {\n        return [];\n      }\n      \n      // For each bucket, get its files\n      const fileListings = await Promise.all(\n        buckets.map(async (bucket) => {\n          const { data: files, error: filesError } = await supabase.storage.from(bucket.name).list();\n          \n          if (filesError) {\n            console.error(`Error fetching files from ${bucket.name}:`, filesError);\n            return { bucket: bucket.name, files: [] };\n          }\n          \n          return { \n            bucket: bucket.name, \n            files: files || [] \n          };\n        })\n      );\n      \n      return fileListings;\n    } catch (error) {\n      console.error('Error fetching uploads:', error);\n      throw error;\n    }\n  };\n\n  // Use react-query for data fetching with caching and automatic refetching\n  const { data: fileListings, isLoading, error } = useQuery({\n    queryKey: ['uploads'],\n    queryFn: fetchAllUploads,\n    refetchOnWindowFocus: false,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n\n  // Format file size to readable format\n  const formatFileSize = (bytes: number | undefined) => {\n    if (!bytes || bytes === 0) return '0 Bytes';\n    \n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return parseFloat((bytes / Math.pow(1024, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  // Format date to readable format\n  const formatDate = (dateString: string | undefined) => {\n    if (!dateString) return 'Unknown';\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  // Get appropriate icon based on file type\n  const getFileIcon = (name: string) => {\n    const ext = name.split('.').pop()?.toLowerCase();\n    if (['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp'].includes(ext || '')) return <ImageIcon size={16} />;\n    if (['mp3', 'wav', 'ogg', 'flac'].includes(ext || '')) return <MusicIcon size={16} />;\n    if (['txt', 'pdf', 'doc', 'docx'].includes(ext || '')) return <FileTextIcon size={16} />;\n    return <FileIcon size={16} />;\n  };\n\n  // Get file extension\n  const getFileExtension = (filename: string) => {\n    return filename.split('.').pop()?.toUpperCase() || '';\n  };\n  \n  // Flatten all files from all buckets into a single array\n  const allFiles = fileListings?.flatMap(listing => \n    listing.files.map(file => ({\n      ...file,\n      bucket: listing.bucket,\n      path: `${listing.bucket}/${file.name}`\n    }))\n  ) || [];\n\n  return (\n    <div>\n      <h1 className=\"text-2xl font-bold mb-6\">Upload Management</h1>\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Uploads</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {Array(3).fill(0).map((_, i) => (\n                <div key={i} className=\"flex space-y-2\">\n                  <Skeleton className=\"h-12 w-full\" />\n                </div>\n              ))}\n            </div>\n          ) : error ? (\n            <div className=\"p-4 bg-red-500/10 text-red-500 rounded-md flex items-center space-x-2\">\n              <AlertCircle size={16} />\n              <span>Error loading files. Please try again later.</span>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>File</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Size</TableHead>\n                  <TableHead>Upload Date</TableHead>\n                  <TableHead>Path</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {allFiles.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={5} className=\"h-24 text-center\">\n                      No uploads found\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  allFiles.map((file, index) => (\n                    <TableRow key={index}>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          {getFileIcon(file.name)}\n                          <span className=\"font-medium\">{file.name}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {getFileExtension(file.name)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{formatFileSize(file.metadata?.size)}</TableCell>\n                      <TableCell>{formatDate(file.created_at || file.last_modified)}</TableCell>\n                      <TableCell className=\"font-mono text-xs truncate max-w-[200px]\">\n                        {file.path}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default DashboardUploads;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/dashboard/DashboardUsers.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":2,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1371,1374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1371,1374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useEffect, useState } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useQuery } from '@tanstack/react-query';\n\ninterface User {\n  id: string;\n  username?: string; // Now directly on User object\n  avatar_url?: string; // Now directly on User object\n  created_at: string;\n  role?: string; // Added role\n  // email and last_sign_in_at are not returned by the new function\n}\n\nconst fetchUserData = async () => {\n  try {\n    // Call our new edge function to get users with roles\n    const { data: usersData, error: usersError } = await supabase.functions.invoke('list-users-with-roles');\n    \n    if (usersError) {\n      console.error('Error invoking list-users-with-roles function:', usersError);\n      throw usersError;\n    }\n    \n    if (!usersData) {\n      console.warn('No data returned from list-users-with-roles function');\n      return [];\n    }\n    \n    // The data from the function is expected to be an array of users\n    // with id, username, avatar_url, created_at, role\n    return usersData.map((user: any) => ({\n      id: user.id,\n      created_at: user.created_at,\n      username: user.username,\n      avatar_url: user.avatar_url,\n      role: user.role,\n    }));\n\n  } catch (error) {\n    console.error('Error fetching users with roles:', error);\n    throw error;\n  }\n};\n\nconst DashboardUsers = () => {\n  const { data: users = [], isLoading, error } = useQuery({\n    queryKey: ['usersWithRoles'], // Changed queryKey to reflect the new data source\n    queryFn: fetchUserData\n  });\n\n  // Helper to get initials from username or id\n  const getInitials = (user: User) => {\n    if (user.username) {\n      return user.username.substring(0, 2).toUpperCase();\n    }\n    // Removed email fallback for initials as email is not fetched\n    return user.id.substring(0, 2).toUpperCase();\n  };\n\n  // Format date to readable format\n  const formatDate = (dateString: string | undefined) => {\n    if (!dateString) return 'N/A'; // Changed from 'Never' to 'N/A' for consistency\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  if (error) {\n    console.error(\"Error loading users:\", error);\n  }\n\n  return (\n    <div>\n      <h1 className=\"text-2xl font-bold mb-6\">User Insights</h1>\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Users</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {Array(5).fill(0).map((_, i) => (\n                <div className=\"flex items-center gap-4\" key={i}>\n                  <Skeleton className=\"h-12 w-12 rounded-full\" />\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-4 w-[250px]\" />\n                    <Skeleton className=\"h-4 w-[200px]\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>User</TableHead>\n                  <TableHead>Role</TableHead> {/* Added Role column */}\n                  <TableHead>Joined</TableHead>\n                  {/* <TableHead>Last Activity</TableHead> Removed Last Activity column */}\n                  <TableHead>ID</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {users.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={4} className=\"text-center\"> {/* Adjusted colSpan */}\n                      No users found\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  users.map((user: User) => (\n                    <TableRow key={user.id}>\n                      <TableCell>\n                        <div className=\"flex items-center gap-3\">\n                          <Avatar>\n                            <AvatarImage src={user.avatar_url || ''} /> {/* Data directly from user object */}\n                            <AvatarFallback>{getInitials(user)}</AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <div className=\"font-medium\">{user.username || 'Anonymous User'}</div> {/* Data directly from user object */}\n                            {/* Removed email display line */}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{user.role || 'N/A'}</TableCell> {/* Display role */}\n                      <TableCell>{formatDate(user.created_at)}</TableCell>\n                      {/* Last Activity cell removed */}\n                      <TableCell className=\"font-mono text-xs\">{user.id.substring(0, 8)}...</TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default DashboardUsers;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/dashboard/content/BeatForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":213,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":213,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":237,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":237,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { toast } from 'sonner';\nimport { Loader2, Save, X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Beat } from '@/lib/api';\nimport { createBeat, updateBeat, uploadFile, getFileUrl } from '@/lib/api/content';\n\nconst beatSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  producer: z.string().min(1, 'Producer is required'),\n  bpm: z.string().optional(),\n  key: z.string().optional(),\n  description: z.string().optional(),\n  tags: z.string().optional(),\n});\n\ntype BeatFormValues = z.infer<typeof beatSchema> & {\n  audioFile?: FileList;\n  imageFile?: FileList;\n};\n\ninterface BeatFormProps {\n  open: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  initialData?: Beat;\n}\n\nexport default function BeatForm({ open, onClose, onSuccess, initialData }: BeatFormProps) {\n  const [loading, setLoading] = useState(false);\n  \n  const form = useForm<BeatFormValues>({\n    resolver: zodResolver(beatSchema),\n    defaultValues: {\n      title: initialData?.title || '',\n      producer: initialData?.producer || '',\n      bpm: initialData?.bpm ? String(initialData.bpm) : '',\n      key: initialData?.key || '',\n      description: initialData?.description || '',\n      tags: initialData?.tags ? initialData.tags.join(', ') : '',\n    },\n  });\n\n  const onSubmit = async (values: BeatFormValues) => {\n    try {\n      setLoading(true);\n      \n      let audioUrl = initialData?.audio_url;\n      let imageUrl = initialData?.image_url;\n      \n      // Handle audio file upload if provided\n      if (values.audioFile?.[0]) {\n        const fileName = `${Date.now()}-${values.audioFile[0].name}`;\n        const filePath = `beats/${fileName}`;\n        await uploadFile('beats', filePath, values.audioFile[0]);\n        audioUrl = getFileUrl('beats', filePath);\n      }\n      \n      // Handle image file upload if provided\n      if (values.imageFile?.[0]) {\n        const fileName = `${Date.now()}-${values.imageFile[0].name}`;\n        const filePath = `images/${fileName}`;\n        await uploadFile('images', filePath, values.imageFile[0]);\n        imageUrl = getFileUrl('images', filePath);\n      }\n      \n      const beatData = {\n        title: values.title,\n        producer: values.producer,\n        bpm: values.bpm ? parseInt(values.bpm) : null,\n        key: values.key || null,\n        description: values.description || null,\n        tags: values.tags ? values.tags.split(',').map(tag => tag.trim()) : [],\n        audio_url: audioUrl,\n        image_url: imageUrl,\n      };\n      \n      if (initialData) {\n        await updateBeat(initialData.id, beatData);\n        toast.success('Beat updated successfully');\n      } else {\n        await createBeat(beatData);\n        toast.success('Beat created successfully');\n      }\n      \n      onSuccess();\n      onClose();\n    } catch (error) {\n      console.error('Error saving beat:', error);\n      toast.error('Failed to save beat');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[525px]\">\n        <DialogHeader>\n          <DialogTitle>{initialData ? 'Edit Beat' : 'Add New Beat'}</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title *</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter beat title\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"producer\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Producer *</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Producer name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"bpm\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>BPM</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" placeholder=\"120\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"key\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Key</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"C Minor\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <FormField\n              control={form.control}\n              name=\"tags\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tags</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Trap, Hip Hop, 90bpm (comma separated)\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Enter beat description\" \n                      {...field}\n                      rows={3} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"audioFile\"\n              render={({ field: { onChange, value, ...field } }) => (\n                <FormItem>\n                  <FormLabel>Audio File {!initialData && '*'}</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"file\" \n                      accept=\"audio/*\"\n                      onChange={(e) => onChange(e.target.files)}\n                      {...field}\n                    />\n                  </FormControl>\n                  {initialData?.audio_url && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      Current: {initialData.audio_url.split('/').pop()}\n                    </div>\n                  )}\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"imageFile\"\n              render={({ field: { onChange, value, ...field } }) => (\n                <FormItem>\n                  <FormLabel>Cover Image</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={(e) => onChange(e.target.files)}\n                      {...field}\n                    />\n                  </FormControl>\n                  {initialData?.image_url && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      Current: {initialData.image_url.split('/').pop()}\n                    </div>\n                  )}\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                <X className=\"mr-2 h-4 w-4\" /> Cancel\n              </Button>\n              <Button type=\"submit\" disabled={loading}>\n                {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Save className=\"mr-2 h-4 w-4\" />}\n                {initialData ? 'Update Beat' : 'Save Beat'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/dashboard/content/ContentBeats.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":31,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":42},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":143,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5335,5360],"text":"No beats found matching &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5335,5360],"text":"No beats found matching &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5335,5360],"text":"No beats found matching &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5335,5360],"text":"No beats found matching &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":143,"column":67,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5372,5373],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5372,5373],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5372,5373],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5372,5373],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":230,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9025,9081],"text":"\n                This will permanently delete the beat &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9025,9081],"text":"\n                This will permanently delete the beat &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9025,9081],"text":"\n                This will permanently delete the beat &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9025,9081],"text":"\n                This will permanently delete the beat &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":230,"column":77,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9102,9149],"text":"&quot;. This action cannot be undone.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9102,9149],"text":"&ldquo;. This action cannot be undone.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9102,9149],"text":"&#34;. This action cannot be undone.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9102,9149],"text":"&rdquo;. This action cannot be undone.\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useMemo } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuthContext } from '@/context/AuthContext'; // Import useAuthContext\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Edit, Trash2, Eye, Plus, Search } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { toast } from 'sonner';\nimport { Beat } from '@/lib/api';\nimport { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, \n  AlertDialogDescription, AlertDialogFooter, AlertDialogCancel, AlertDialogAction } from '@/components/ui/alert-dialog';\nimport BeatForm from './BeatForm';\nimport { deleteBeat } from '@/lib/api/content';\nimport APIErrorBoundary from '@/components/common/APIErrorBoundary';\n\ninterface ContentBeatsProps {\n  searchResults?: Beat[];\n  isSearching?: boolean;\n  searchTerm?: string;\n}\n\nconst ContentBeats = ({ searchResults, isSearching, searchTerm = '' }: ContentBeatsProps) => {\n  const [selectedBeat, setSelectedBeat] = useState<Beat | null>(null);\n  const [isEditOpen, setIsEditOpen] = useState(false);\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [beatToDelete, setBeatToDelete] = useState<Beat | null>(null);\n  \n  const { hasRole, isLoadingProfile, user } = useAuthContext(); // Get auth context\n  const queryClient = useQueryClient();\n\n  // Memoize role checks\n  const canAddEdit = useMemo(() => !isLoadingProfile && hasRole(['admin', 'editor']), [isLoadingProfile, hasRole]);\n  const canDelete = useMemo(() => !isLoadingProfile && hasRole('admin'), [isLoadingProfile, hasRole]);\n\n  // Fetch beats with React Query\n  const { data: beats = [], isLoading, refetch } = useQuery({\n    queryKey: ['beats'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('beats')\n        .select('*')\n        .order('created_at', { ascending: false });\n        \n      if (error) throw error;\n      return data as Beat[];\n    },\n    enabled: !searchTerm // Only run this query when not searching\n  });\n\n  // If we have search results and a search term, use those instead\n  const displayedBeats = searchTerm && searchResults ? searchResults : beats;\n  const isLoadingBeats = (searchTerm && isSearching) || (!searchTerm && isLoading);\n\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => deleteBeat(id),\n    onSuccess: () => {\n      toast.success('Beat deleted successfully');\n      queryClient.invalidateQueries({ queryKey: ['beats'] });\n      setBeatToDelete(null);\n    },\n    onError: (error) => {\n      console.error('Error deleting beat:', error);\n      toast.error('Failed to delete beat');\n    }\n  });\n\n  const handleDeleteClick = (beat: Beat) => {\n    setBeatToDelete(beat);\n  };\n\n  const confirmDelete = () => {\n    if (beatToDelete) {\n      deleteMutation.mutate(beatToDelete.id);\n    }\n  };\n\n  const handleEditClick = (beat: Beat) => {\n    setSelectedBeat(beat);\n    setIsEditOpen(true);\n  };\n\n  const handleCreateClick = () => {\n    setIsCreateOpen(true);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric', \n      month: 'short', \n      day: 'numeric'\n    });\n  };\n\n  return (\n    <APIErrorBoundary onReset={refetch} fallbackMessage=\"Failed to load beats data\">\n      <div>\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-xl font-semibold\">\n            {searchTerm ? `Search Results: ${searchTerm}` : 'Beats List'}\n          </h2>\n          {canAddEdit && (\n            <Button className=\"gap-1\" onClick={handleCreateClick}>\n              <Plus size={16} />\n              Add New Beat\n            </Button>\n          )}\n        </div>\n\n        {isLoadingBeats || isLoadingProfile ? ( // Also consider isLoadingProfile for initial UI state\n          <div className=\"space-y-4\">\n            {Array(3).fill(0).map((_, i) => (\n              <div key={i} className=\"flex space-y-2\">\n                <Skeleton className=\"h-12 w-full\" />\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Title</TableHead>\n                  <TableHead>Producer</TableHead>\n                  <TableHead>BPM</TableHead>\n                  <TableHead>Key</TableHead>\n                  <TableHead>Tags</TableHead>\n                  <TableHead>Downloads</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {displayedBeats.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"h-24 text-center\">\n                      {searchTerm ? (\n                        <div className=\"flex flex-col items-center justify-center text-gray-500\">\n                          <Search className=\"h-8 w-8 mb-2\" />\n                          <p>No beats found matching \"{searchTerm}\"</p>\n                        </div>\n                      ) : (\n                        'No beats found'\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  displayedBeats.map((beat) => (\n                    <TableRow key={beat.id}>\n                      <TableCell className=\"font-medium\">{beat.title}</TableCell>\n                      <TableCell>{beat.producer}</TableCell>\n                      <TableCell>{beat.bpm || 'N/A'}</TableCell>\n                      <TableCell>{beat.key || 'N/A'}</TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {beat.tags?.slice(0, 2).map((tag, i) => (\n                            <Badge key={i} variant=\"secondary\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          ))}\n                          {beat.tags && beat.tags.length > 2 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{beat.tags.length - 2}\n                            </Badge>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>{beat.downloads}</TableCell>\n                      <TableCell>{formatDate(beat.created_at)}</TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex justify-end gap-2\">\n                          <Button variant=\"ghost\" size=\"icon\" asChild>\n                            <a href={`/beats?id=${beat.id}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                              <Eye size={16} />\n                            </a>\n                          </Button>\n                          {canAddEdit && (\n                            <Button variant=\"ghost\" size=\"icon\" onClick={() => handleEditClick(beat)}>\n                              <Edit size={16} />\n                            </Button>\n                          )}\n                          {canDelete && (\n                            <Button \n                              variant=\"ghost\" \n                              size=\"icon\" \n                              className=\"text-destructive hover:text-destructive\"\n                              onClick={() => handleDeleteClick(beat)}\n                            >\n                              <Trash2 size={16} />\n                            </Button>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n\n        {/* Create Form Dialog */}\n        {isCreateOpen && (\n          <BeatForm \n            open={isCreateOpen}\n            onClose={() => setIsCreateOpen(false)}\n            onSuccess={() => queryClient.invalidateQueries({ queryKey: ['beats'] })}\n          />\n        )}\n\n        {/* Edit Form Dialog */}\n        {selectedBeat && isEditOpen && (\n          <BeatForm \n            open={isEditOpen}\n            onClose={() => setIsEditOpen(false)}\n            onSuccess={() => queryClient.invalidateQueries({ queryKey: ['beats'] })}\n            initialData={selectedBeat}\n          />\n        )}\n\n        {/* Delete Confirmation Dialog */}\n        <AlertDialog open={!!beatToDelete} onOpenChange={() => setBeatToDelete(null)}>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n              <AlertDialogDescription>\n                This will permanently delete the beat \"{beatToDelete?.title}\". This action cannot be undone.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel>Cancel</AlertDialogCancel>\n              <AlertDialogAction \n                onClick={confirmDelete} \n                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              >\n                Delete\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </div>\n    </APIErrorBoundary>\n  );\n};\n\nexport default ContentBeats;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/dashboard/content/ContentCoverArt.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":143,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5536,5566],"text":"No cover arts found matching &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5536,5566],"text":"No cover arts found matching &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5536,5566],"text":"No cover arts found matching &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5536,5566],"text":"No cover arts found matching &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":143,"column":72,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5578,5579],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5578,5579],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5578,5579],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5578,5579],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":234,"column":60,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9463,9524],"text":"\n                This will permanently delete the cover art &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9463,9524],"text":"\n                This will permanently delete the cover art &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9463,9524],"text":"\n                This will permanently delete the cover art &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9463,9524],"text":"\n                This will permanently delete the cover art &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":234,"column":86,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9549,9596],"text":"&quot;. This action cannot be undone.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9549,9596],"text":"&ldquo;. This action cannot be undone.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9549,9596],"text":"&#34;. This action cannot be undone.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9549,9596],"text":"&rdquo;. This action cannot be undone.\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useMemo } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuthContext } from '@/context/AuthContext'; // Import useAuthContext\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Edit, Trash2, Eye, Plus, Search } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { toast } from 'sonner';\nimport { CoverArt } from '@/lib/api';\nimport { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, \n  AlertDialogDescription, AlertDialogFooter, AlertDialogCancel, AlertDialogAction } from '@/components/ui/alert-dialog';\nimport CoverArtForm from './CoverArtForm';\nimport { deleteCoverArt } from '@/lib/api/content';\nimport APIErrorBoundary from '@/components/common/APIErrorBoundary';\n\ninterface ContentCoverArtProps {\n  searchResults?: CoverArt[];\n  isSearching?: boolean;\n  searchTerm?: string;\n}\n\nconst ContentCoverArt = ({ searchResults, isSearching, searchTerm = '' }: ContentCoverArtProps) => {\n  const [selectedCoverArt, setSelectedCoverArt] = useState<CoverArt | null>(null);\n  const [isEditOpen, setIsEditOpen] = useState(false);\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [coverArtToDelete, setCoverArtToDelete] = useState<CoverArt | null>(null);\n  \n  const { hasRole, isLoadingProfile } = useAuthContext(); // Get auth context\n  const queryClient = useQueryClient();\n\n  // Memoize role checks\n  const canAddEdit = useMemo(() => !isLoadingProfile && hasRole(['admin', 'editor']), [isLoadingProfile, hasRole]);\n  const canDelete = useMemo(() => !isLoadingProfile && hasRole('admin'), [isLoadingProfile, hasRole]);\n\n  // Fetch cover arts with React Query\n  const { data: coverArts = [], isLoading, refetch } = useQuery({\n    queryKey: ['coverArts'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('cover_art')\n        .select('*')\n        .order('created_at', { ascending: false });\n        \n      if (error) throw error;\n      return data as CoverArt[];\n    },\n    enabled: !searchTerm // Only run this query when not searching\n  });\n\n  // If we have search results and a search term, use those instead\n  const displayedCoverArts = searchTerm && searchResults ? searchResults : coverArts;\n  const isLoadingCoverArts = (searchTerm && isSearching) || (!searchTerm && isLoading);\n\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => deleteCoverArt(id),\n    onSuccess: () => {\n      toast.success('Cover art deleted successfully');\n      queryClient.invalidateQueries({ queryKey: ['coverArts'] });\n      setCoverArtToDelete(null);\n    },\n    onError: (error) => {\n      console.error('Error deleting cover art:', error);\n      toast.error('Failed to delete cover art');\n    }\n  });\n\n  const handleDeleteClick = (coverArt: CoverArt) => {\n    setCoverArtToDelete(coverArt);\n  };\n\n  const confirmDelete = () => {\n    if (coverArtToDelete) {\n      deleteMutation.mutate(coverArtToDelete.id);\n    }\n  };\n\n  const handleEditClick = (coverArt: CoverArt) => {\n    setSelectedCoverArt(coverArt);\n    setIsEditOpen(true);\n  };\n\n  const handleCreateClick = () => {\n    setIsCreateOpen(true);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric', \n      month: 'short', \n      day: 'numeric'\n    });\n  };\n\n  return (\n    <APIErrorBoundary onReset={refetch} fallbackMessage=\"Failed to load cover art data\">\n      <div>\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-xl font-semibold\">\n            {searchTerm ? `Search Results: ${searchTerm}` : 'Cover Art List'}\n          </h2>\n          {canAddEdit && (\n            <Button className=\"gap-1\" onClick={handleCreateClick}>\n              <Plus size={16} />\n              Add New Cover Art\n            </Button>\n          )}\n        </div>\n\n        {isLoadingCoverArts || isLoadingProfile ? ( // Also consider isLoadingProfile for initial UI state\n          <div className=\"space-y-4\">\n            {Array(3).fill(0).map((_, i) => (\n              <div key={i} className=\"flex space-y-2\">\n                <Skeleton className=\"h-12 w-full\" />\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Image</TableHead>\n                  <TableHead>Title</TableHead>\n                  <TableHead>Artist</TableHead>\n                  <TableHead>Tags</TableHead>\n                  <TableHead>Downloads</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {displayedCoverArts.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"h-24 text-center\">\n                      {searchTerm ? (\n                        <div className=\"flex flex-col items-center justify-center text-gray-500\">\n                          <Search className=\"h-8 w-8 mb-2\" />\n                          <p>No cover arts found matching \"{searchTerm}\"</p>\n                        </div>\n                      ) : (\n                        'No cover arts found'\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  displayedCoverArts.map((art) => (\n                    <TableRow key={art.id}>\n                      <TableCell>\n                        <Avatar className=\"h-10 w-10 rounded-md\">\n                          <AvatarImage src={art.image_url} alt={art.title} />\n                          <AvatarFallback className=\"rounded-md\">ART</AvatarFallback>\n                        </Avatar>\n                      </TableCell>\n                      <TableCell className=\"font-medium\">{art.title}</TableCell>\n                      <TableCell>{art.artist}</TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {art.tags?.slice(0, 2).map((tag, i) => (\n                            <Badge key={i} variant=\"secondary\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          ))}\n                          {art.tags && art.tags.length > 2 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{art.tags.length - 2}\n                            </Badge>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>{art.downloads}</TableCell>\n                      <TableCell>{formatDate(art.created_at)}</TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex justify-end gap-2\">\n                          <Button variant=\"ghost\" size=\"icon\" asChild>\n                            <a href={`/cover-art?id=${art.id}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                              <Eye size={16} />\n                            </a>\n                          </Button>\n                          {canAddEdit && (\n                            <Button variant=\"ghost\" size=\"icon\" onClick={() => handleEditClick(art)}>\n                              <Edit size={16} />\n                            </Button>\n                          )}\n                          {canDelete && (\n                            <Button \n                              variant=\"ghost\" \n                              size=\"icon\"\n                              className=\"text-destructive hover:text-destructive\"\n                              onClick={() => handleDeleteClick(art)}\n                            >\n                              <Trash2 size={16} />\n                            </Button>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n\n        {/* Create Form Dialog */}\n        {isCreateOpen && (\n          <CoverArtForm \n            open={isCreateOpen}\n            onClose={() => setIsCreateOpen(false)}\n            onSuccess={() => queryClient.invalidateQueries({ queryKey: ['coverArts'] })}\n          />\n        )}\n\n        {/* Edit Form Dialog */}\n        {selectedCoverArt && isEditOpen && (\n          <CoverArtForm \n            open={isEditOpen}\n            onClose={() => setIsEditOpen(false)}\n            onSuccess={() => queryClient.invalidateQueries({ queryKey: ['coverArts'] })}\n            initialData={selectedCoverArt}\n          />\n        )}\n\n        {/* Delete Confirmation Dialog */}\n        <AlertDialog open={!!coverArtToDelete} onOpenChange={() => setCoverArtToDelete(null)}>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n              <AlertDialogDescription>\n                This will permanently delete the cover art \"{coverArtToDelete?.title}\". This action cannot be undone.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel>Cancel</AlertDialogCancel>\n              <AlertDialogAction \n                onClick={confirmDelete} \n                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              >\n                Delete\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </div>\n    </APIErrorBoundary>\n  );\n};\n\nexport default ContentCoverArt;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/dashboard/content/ContentRemixes.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":143,"column":56,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5405,5432],"text":"No remixes found matching &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5405,5432],"text":"No remixes found matching &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5405,5432],"text":"No remixes found matching &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5405,5432],"text":"No remixes found matching &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":143,"column":69,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5444,5445],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5444,5445],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5444,5445],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5444,5445],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":230,"column":56,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9179,9236],"text":"\n                This will permanently delete the remix &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9179,9236],"text":"\n                This will permanently delete the remix &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9179,9236],"text":"\n                This will permanently delete the remix &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9179,9236],"text":"\n                This will permanently delete the remix &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":230,"column":79,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9258,9305],"text":"&quot;. This action cannot be undone.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9258,9305],"text":"&ldquo;. This action cannot be undone.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9258,9305],"text":"&#34;. This action cannot be undone.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9258,9305],"text":"&rdquo;. This action cannot be undone.\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useMemo } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuthContext } from '@/context/AuthContext'; // Import useAuthContext\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Edit, Trash2, Eye, Plus, Search } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { toast } from 'sonner';\nimport { Remix } from '@/lib/api';\nimport { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, \n  AlertDialogDescription, AlertDialogFooter, AlertDialogCancel, AlertDialogAction } from '@/components/ui/alert-dialog';\nimport RemixForm from './RemixForm';\nimport { deleteRemix } from '@/lib/api/content';\nimport APIErrorBoundary from '@/components/common/APIErrorBoundary';\n\ninterface ContentRemixesProps {\n  searchResults?: Remix[];\n  isSearching?: boolean;\n  searchTerm?: string;\n}\n\nconst ContentRemixes = ({ searchResults, isSearching, searchTerm = '' }: ContentRemixesProps) => {\n  const [selectedRemix, setSelectedRemix] = useState<Remix | null>(null);\n  const [isEditOpen, setIsEditOpen] = useState(false);\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [remixToDelete, setRemixToDelete] = useState<Remix | null>(null);\n  \n  const { hasRole, isLoadingProfile } = useAuthContext(); // Get auth context\n  const queryClient = useQueryClient();\n\n  // Memoize role checks\n  const canAddEdit = useMemo(() => !isLoadingProfile && hasRole(['admin', 'editor']), [isLoadingProfile, hasRole]);\n  const canDelete = useMemo(() => !isLoadingProfile && hasRole('admin'), [isLoadingProfile, hasRole]);\n\n  // Fetch remixes with React Query\n  const { data: remixes = [], isLoading, refetch } = useQuery({\n    queryKey: ['remixes'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('remixes')\n        .select('*')\n        .order('created_at', { ascending: false });\n        \n      if (error) throw error;\n      return data as Remix[];\n    },\n    enabled: !searchTerm // Only run this query when not searching\n  });\n\n  // If we have search results and a search term, use those instead\n  const displayedRemixes = searchTerm && searchResults ? searchResults : remixes;\n  const isLoadingRemixes = (searchTerm && isSearching) || (!searchTerm && isLoading);\n\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => deleteRemix(id),\n    onSuccess: () => {\n      toast.success('Remix deleted successfully');\n      queryClient.invalidateQueries({ queryKey: ['remixes'] });\n      setRemixToDelete(null);\n    },\n    onError: (error) => {\n      console.error('Error deleting remix:', error);\n      toast.error('Failed to delete remix');\n    }\n  });\n\n  const handleDeleteClick = (remix: Remix) => {\n    setRemixToDelete(remix);\n  };\n\n  const confirmDelete = () => {\n    if (remixToDelete) {\n      deleteMutation.mutate(remixToDelete.id);\n    }\n  };\n\n  const handleEditClick = (remix: Remix) => {\n    setSelectedRemix(remix);\n    setIsEditOpen(true);\n  };\n\n  const handleCreateClick = () => {\n    setIsCreateOpen(true);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric', \n      month: 'short', \n      day: 'numeric'\n    });\n  };\n\n  return (\n    <APIErrorBoundary onReset={refetch} fallbackMessage=\"Failed to load remixes data\">\n      <div>\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-xl font-semibold\">\n            {searchTerm ? `Search Results: ${searchTerm}` : 'Remixes List'}\n          </h2>\n          {canAddEdit && (\n            <Button className=\"gap-1\" onClick={handleCreateClick}>\n              <Plus size={16} />\n              Add New Remix\n            </Button>\n          )}\n        </div>\n\n        {isLoadingRemixes || isLoadingProfile ? ( // Also consider isLoadingProfile for initial UI state\n          <div className=\"space-y-4\">\n            {Array(3).fill(0).map((_, i) => (\n              <div key={i} className=\"flex space-y-2\">\n                <Skeleton className=\"h-12 w-full\" />\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Title</TableHead>\n                  <TableHead>Remixer</TableHead>\n                  <TableHead>Original Artist</TableHead>\n                  <TableHead>YouTube ID</TableHead>\n                  <TableHead>Tags</TableHead>\n                  <TableHead>Downloads</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {displayedRemixes.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"h-24 text-center\">\n                      {searchTerm ? (\n                        <div className=\"flex flex-col items-center justify-center text-gray-500\">\n                          <Search className=\"h-8 w-8 mb-2\" />\n                          <p>No remixes found matching \"{searchTerm}\"</p>\n                        </div>\n                      ) : (\n                        'No remixes found'\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  displayedRemixes.map((remix) => (\n                    <TableRow key={remix.id}>\n                      <TableCell className=\"font-medium\">{remix.title}</TableCell>\n                      <TableCell>{remix.remixer}</TableCell>\n                      <TableCell>{remix.original_artist}</TableCell>\n                      <TableCell>{remix.youtube_id ? remix.youtube_id.substring(0, 8) + '...' : 'N/A'}</TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {remix.tags?.slice(0, 2).map((tag, i) => (\n                            <Badge key={i} variant=\"secondary\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          ))}\n                          {remix.tags && remix.tags.length > 2 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{remix.tags.length - 2}\n                            </Badge>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>{remix.downloads}</TableCell>\n                      <TableCell>{formatDate(remix.created_at)}</TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex justify-end gap-2\">\n                          <Button variant=\"ghost\" size=\"icon\" asChild>\n                            <a href={`/remixes?id=${remix.id}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                              <Eye size={16} />\n                            </a>\n                          </Button>\n                          {canAddEdit && (\n                            <Button variant=\"ghost\" size=\"icon\" onClick={() => handleEditClick(remix)}>\n                              <Edit size={16} />\n                            </Button>\n                          )}\n                          {canDelete && (\n                            <Button \n                              variant=\"ghost\" \n                              size=\"icon\" \n                              className=\"text-destructive hover:text-destructive\"\n                              onClick={() => handleDeleteClick(remix)}\n                            >\n                              <Trash2 size={16} />\n                            </Button>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n\n        {/* Create Form Dialog */}\n        {isCreateOpen && (\n          <RemixForm \n            open={isCreateOpen}\n            onClose={() => setIsCreateOpen(false)}\n            onSuccess={() => queryClient.invalidateQueries({ queryKey: ['remixes'] })}\n          />\n        )}\n\n        {/* Edit Form Dialog */}\n        {selectedRemix && isEditOpen && (\n          <RemixForm \n            open={isEditOpen}\n            onClose={() => setIsEditOpen(false)}\n            onSuccess={() => queryClient.invalidateQueries({ queryKey: ['remixes'] })}\n            initialData={selectedRemix}\n          />\n        )}\n\n        {/* Delete Confirmation Dialog */}\n        <AlertDialog open={!!remixToDelete} onOpenChange={() => setRemixToDelete(null)}>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n              <AlertDialogDescription>\n                This will permanently delete the remix \"{remixToDelete?.title}\". This action cannot be undone.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel>Cancel</AlertDialogCancel>\n              <AlertDialogAction \n                onClick={confirmDelete} \n                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              >\n                Delete\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </div>\n    </APIErrorBoundary>\n  );\n};\n\nexport default ContentRemixes;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/dashboard/content/CoverArtForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":154,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":154,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { toast } from 'sonner';\nimport { Loader2, Save, X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { CoverArt } from '@/lib/api';\nimport { createCoverArt, updateCoverArt, uploadFile, getFileUrl } from '@/lib/api/content';\n\nconst coverArtSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  artist: z.string().min(1, 'Artist is required'),\n  tags: z.string().optional(),\n});\n\ntype CoverArtFormValues = z.infer<typeof coverArtSchema> & {\n  imageFile?: FileList;\n};\n\ninterface CoverArtFormProps {\n  open: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  initialData?: CoverArt;\n}\n\nexport default function CoverArtForm({ open, onClose, onSuccess, initialData }: CoverArtFormProps) {\n  const [loading, setLoading] = useState(false);\n  \n  const form = useForm<CoverArtFormValues>({\n    resolver: zodResolver(coverArtSchema),\n    defaultValues: {\n      title: initialData?.title || '',\n      artist: initialData?.artist || '',\n      tags: initialData?.tags ? initialData.tags.join(', ') : '',\n    },\n  });\n\n  const onSubmit = async (values: CoverArtFormValues) => {\n    try {\n      setLoading(true);\n      \n      let imageUrl = initialData?.image_url;\n      \n      // Handle image file upload if provided\n      if (values.imageFile?.[0]) {\n        const fileName = `${Date.now()}-${values.imageFile[0].name}`;\n        const filePath = `cover-art/${fileName}`;\n        await uploadFile('images', filePath, values.imageFile[0]);\n        imageUrl = getFileUrl('images', filePath);\n      }\n      \n      const coverArtData = {\n        title: values.title,\n        artist: values.artist,\n        tags: values.tags ? values.tags.split(',').map(tag => tag.trim()) : [],\n        image_url: imageUrl,\n      };\n      \n      if (initialData) {\n        if (!imageUrl) {\n          toast.error('Cover art image is required');\n          setLoading(false);\n          return;\n        }\n        await updateCoverArt(initialData.id, coverArtData);\n        toast.success('Cover art updated successfully');\n      } else {\n        if (!imageUrl) {\n          toast.error('Cover art image is required');\n          setLoading(false);\n          return;\n        }\n        await createCoverArt(coverArtData);\n        toast.success('Cover art created successfully');\n      }\n      \n      onSuccess();\n      onClose();\n    } catch (error) {\n      console.error('Error saving cover art:', error);\n      toast.error('Failed to save cover art');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[525px]\">\n        <DialogHeader>\n          <DialogTitle>{initialData ? 'Edit Cover Art' : 'Add New Cover Art'}</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title *</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter cover art title\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"artist\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Artist *</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Artist name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"tags\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tags</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Album, Single, EP (comma separated)\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"imageFile\"\n              render={({ field: { onChange, value, ...field } }) => (\n                <FormItem>\n                  <FormLabel>Cover Image {!initialData && '*'}</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={(e) => onChange(e.target.files)}\n                      {...field}\n                    />\n                  </FormControl>\n                  {initialData?.image_url && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      Current: {initialData.image_url.split('/').pop()}\n                    </div>\n                  )}\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                <X className=\"mr-2 h-4 w-4\" /> Cancel\n              </Button>\n              <Button type=\"submit\" disabled={loading}>\n                {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Save className=\"mr-2 h-4 w-4\" />}\n                {initialData ? 'Update Cover Art' : 'Save Cover Art'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/dashboard/content/RemixForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/effects/ButtonEffects.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/effects/UIEffects.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/layout/Footer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Music' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Music, Youtube, Instagram, Twitter, Heart } from \"lucide-react\";\nimport DonateModal from \"../common/DonateModal\";\nimport { subscribeToNewsletter } from \"@/lib/api\"; \nimport { toast } from \"sonner\";\n\nconst Footer = () => {\n  const [donateModalOpen, setDonateModalOpen] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [isSubscribing, setIsSubscribing] = useState(false);\n  \n  const handleSubscribe = async () => {\n    if (!email || !email.includes('@')) {\n      toast.error('Please enter a valid email address');\n      return;\n    }\n    \n    setIsSubscribing(true);\n    try {\n      await subscribeToNewsletter(email);\n      toast.success('Thank you for subscribing to our newsletter!');\n      setEmail(''); // Clear the input after successful subscription\n    } catch (error) {\n      console.error('Subscription error:', error);\n      toast.error('Failed to subscribe. Please try again later.');\n    } finally {\n      setIsSubscribing(false);\n    }\n  };\n  \n  return (\n    <footer className=\"bg-card border-t border-border mt-12 pt-12 pb-6\">\n      <div className=\"container\">\n        <div className=\"grid grid-cols-1 md:grid-cols-12 gap-8\">\n          <div className=\"md:col-span-4\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <img \n                src=\"/lovable-uploads/6f3af6e6-2893-440a-9d49-fee740ae1d20.png\" \n                alt=\"What If Music Logo\" \n                className=\"h-8 w-auto\"\n              />\n              <span className=\"text-xl font-bold\">What If Music?</span>\n            </div>\n            <p className=\"text-muted-foreground mb-4\">\n              Free beats, remixes, and cover art for content creators. All downloads\n              are royalty-free for non-commercial use.\n            </p>\n            <div className=\"flex gap-4\">\n              <a \n                href=\"https://www.youtube.com/channel/UCvzFTezT7exbODaM7HJBL8Q\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-foreground/70 hover:text-beatwave-500 transition-colors\"\n              >\n                <Youtube size={20} />\n              </a>\n              <a \n                href=\"https://www.instagram.com/whatifmusiic\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-foreground/70 hover:text-beatwave-500 transition-colors\"\n              >\n                <Instagram size={20} />\n              </a>\n              <a \n                href=\"https://twitter.com/whatifmusiic\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-foreground/70 hover:text-beatwave-500 transition-colors\"\n              >\n                <Twitter size={20} />\n              </a>\n            </div>\n          </div>\n\n          <div className=\"md:col-span-2\">\n            <h4 className=\"text-sm font-semibold uppercase mb-4\">Quick Links</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link \n                  to=\"/beats\"\n                  className=\"text-muted-foreground hover:text-beatwave-500 transition-colors\"\n                >\n                  Beats\n                </Link>\n              </li>\n              <li>\n                <Link \n                  to=\"/remixes\"\n                  className=\"text-muted-foreground hover:text-beatwave-500 transition-colors\"\n                >\n                  Remixes\n                </Link>\n              </li>\n              <li>\n                <Link \n                  to=\"/cover-art\"\n                  className=\"text-muted-foreground hover:text-beatwave-500 transition-colors\"\n                >\n                  Cover Art\n                </Link>\n              </li>\n              <li>\n                <Link \n                  to=\"/about\"\n                  className=\"text-muted-foreground hover:text-beatwave-500 transition-colors\"\n                >\n                  About\n                </Link>\n              </li>\n              <li>\n                <button\n                  onClick={() => setDonateModalOpen(true)}\n                  className=\"text-muted-foreground hover:text-beatwave-500 transition-colors\"\n                >\n                  Support Us\n                </button>\n              </li>\n            </ul>\n          </div>\n\n          <div className=\"md:col-span-2\">\n            <h4 className=\"text-sm font-semibold uppercase mb-4\">Legal</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link \n                  to=\"/privacy\"\n                  className=\"text-muted-foreground hover:text-beatwave-500 transition-colors\"\n                >\n                  Privacy Policy\n                </Link>\n              </li>\n              <li>\n                <Link \n                  to=\"/terms\"\n                  className=\"text-muted-foreground hover:text-beatwave-500 transition-colors\"\n                >\n                  Terms of Use\n                </Link>\n              </li>\n              <li>\n                <Link \n                  to=\"/dmca\"\n                  className=\"text-muted-foreground hover:text-beatwave-500 transition-colors\"\n                >\n                  DMCA Policy\n                </Link>\n              </li>\n              <li>\n                <Link \n                  to=\"/copyright\"\n                  className=\"text-muted-foreground hover:text-beatwave-500 transition-colors\"\n                >\n                  Copyright\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div className=\"md:col-span-4\">\n            <h4 className=\"text-sm font-semibold uppercase mb-4\">Subscribe</h4>\n            <p className=\"text-muted-foreground mb-4\">\n              Get notified about new beats, remixes, and exclusive content.\n            </p>\n            <div className=\"flex gap-2\">\n              <Input \n                type=\"email\" \n                placeholder=\"Your email\" \n                className=\"bg-secondary/50\" \n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                onKeyDown={(e) => e.key === 'Enter' && handleSubscribe()}\n              />\n              <Button \n                className=\"shrink-0\" \n                onClick={handleSubscribe}\n                disabled={isSubscribing}\n              >\n                {isSubscribing ? 'Subscribing...' : 'Subscribe'}\n              </Button>\n            </div>\n            \n            <div className=\"mt-6\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setDonateModalOpen(true)}\n                className=\"w-full border-beatwave-500 text-beatwave-500 hover:bg-beatwave-500/10\"\n              >\n                <Heart className=\"mr-2 h-4 w-4\" />\n                Support Our Music\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Ad Banner - Footer */}\n        <div className=\"mt-12 mb-8 p-4 border border-border rounded-lg bg-secondary/20 text-center\">\n          <p className=\"text-xs text-muted-foreground\">Advertisement</p>\n          <div className=\"h-16 flex items-center justify-center\">\n            <p className=\"text-sm text-muted-foreground\">Ad Banner Placeholder (728x90)</p>\n          </div>\n        </div>\n\n        <div className=\"border-t border-border mt-8 pt-6 text-center text-sm text-muted-foreground\">\n          <p>&copy; {new Date().getFullYear()} What If Music?. All rights reserved.</p>\n        </div>\n      </div>\n      <DonateModal open={donateModalOpen} setOpen={setDonateModalOpen} />\n    </footer>\n  );\n};\n\nexport default Footer;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/layout/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/layout/PageLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/remixes/RemixCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/remixes/RemixCardContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":56,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":56,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/calendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_props' is defined but never used.","line":55,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_props' is defined but never used.","line":56,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/chart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":70,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/command.tsx","messages":[{"ruleId":"react/no-unknown-property","severity":2,"message":"Unknown property 'cmdk-input-wrapper' found","line":42,"column":52,"nodeType":"JSXAttribute","messageId":"unknownProp","endLine":42,"endColumn":73}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":168,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":168,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":760,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":760,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/context/AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[557,560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[557,560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[618,621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[618,621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[649,652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[649,652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":26,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":26,"endColumn":14,"suggestions":[{"fix":{"range":[1015,1202],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":50,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":50,"endColumn":14,"suggestions":[{"fix":{"range":[1798,1899],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":64,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":64,"endColumn":16,"suggestions":[{"fix":{"range":[2398,2485],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":68,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":68,"endColumn":14,"suggestions":[{"fix":{"range":[2564,2631],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { createContext, useContext, ReactNode } from 'react';\nimport { User, Session } from '@supabase/supabase-js';\nimport { useAuth, UserProfile } from '@/hooks/useAuth'; // Import UserProfile\nimport { Navigate, useLocation } from 'react-router-dom';\n\ntype AuthContextType = {\n  user: User | null;\n  session: Session | null;\n  userProfile: UserProfile | null; // Added userProfile\n  loading: boolean; // For initial auth session/user loading\n  isLoadingProfile: boolean; // For profile data loading\n  signIn: (email: string, password: string) => Promise<any>;\n  signUp: (email: string, password: string) => Promise<any>;\n  signOut: () => Promise<any>;\n  getUserRole: () => string | null; // Added getUserRole\n  hasRole: (roleOrRoles: string | string[]) => boolean; // Added hasRole\n};\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const auth = useAuth();\n  \n  // Log includes user and profile loading state\n  console.log(\"AuthProvider: auth state updated\", { \n    user: !!auth.user, \n    profile: !!auth.userProfile, \n    loading: auth.loading, \n    isLoadingProfile: auth.isLoadingProfile \n  });\n  \n  return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuthContext() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuthContext must be used within an AuthProvider');\n  }\n  return context;\n}\n\n// Create a route guard component to protect dashboard routes\nexport function RequireAuth({ children }: { children: ReactNode }) {\n  // Use loading for session and isLoadingProfile for profile data\n  const { user, loading, isLoadingProfile } = useAuthContext();\n  const location = useLocation();\n  \n  console.log(`RequireAuth: user=${!!user}, loading=${loading}, isLoadingProfile=${isLoadingProfile}`);\n\n  // Wait if either session is loading or profile is loading\n  if (loading || isLoadingProfile) {\n    return (\n      <div className=\"flex h-screen w-full items-center justify-center\">\n        <div className=\"h-8 w-8 animate-spin rounded-full border-2 border-primary border-t-transparent\"></div>\n        <span className=\"ml-2\">Verifying authentication and loading profile...</span>\n      </div>\n    );\n  }\n\n  // If not authenticated after all loading completes, redirect to auth\n  if (!user) {\n    console.log(\"RequireAuth: User not authenticated after loading, redirecting to /auth\");\n    return <Navigate to=\"/auth\" state={{ from: location }} replace />;\n  }\n\n  console.log(\"RequireAuth: User authenticated, rendering children\");\n  return <>{children}</>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/use-debounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type.","line":18,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":18,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 5000 // Changed from 1000000 to 5000 milliseconds (5 seconds)\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/useAuth.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1214,1217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1214,1217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1775,1778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1775,1778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2218,2221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2218,2221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":76,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":76,"endColumn":16,"suggestions":[{"fix":{"range":[2491,2529],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":114,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":114,"endColumn":18,"suggestions":[{"fix":{"range":[3821,3907],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":134,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":134,"endColumn":20,"suggestions":[{"fix":{"range":[4486,4533],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":137,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":137,"endColumn":20,"suggestions":[{"fix":{"range":[4699,4779],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":168,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":168,"endColumn":18,"suggestions":[{"fix":{"range":[5574,5607],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useEffect, useState, useCallback } from 'react';\nimport { User, Session } from '@supabase/supabase-js';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\n\n// Define UserProfile interface\nexport interface UserProfile {\n  id: string;\n  role: string | null;\n  // Add other profile fields here if needed in the future\n  username?: string; \n  avatar_url?: string;\n}\n\nexport function useAuth() {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true); // For initial session/user loading\n  const [isLoadingProfile, setIsLoadingProfile] = useState(false); // For profile data loading\n\n  // Authentication methods\n  const signIn = async (email: string, password: string) => {\n    try {\n      const response = await supabase.auth.signInWithPassword({ email, password });\n      if (response.error) {\n        toast.error(response.error.message);\n      } else if (response.data?.user) {\n        toast.success('Signed in successfully!');\n      }\n      return response;\n    } catch (error: any) {\n      console.error('Sign in error:', error);\n      toast.error('Unable to sign in. Please check your credentials.');\n      return { data: null, error };\n    }\n  };\n\n  const signUp = async (email: string, password: string) => {\n    try {\n      const response = await supabase.auth.signUp({ email, password });\n      if (response.error) {\n        toast.error(response.error.message);\n      } else {\n        toast.success('Account created successfully! Please check your email to confirm your account.');\n      }\n      return response;\n    } catch (error: any) {\n      console.error('Sign up error:', error);\n      toast.error('Unable to sign up. Please check your credentials.');\n      return { data: null, error };\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) {\n        toast.error(error.message);\n      } else {\n        toast.success('Signed out successfully!');\n      }\n      return { error };\n    } catch (error: any) {\n      console.error('Sign out error:', error);\n      toast.error('Unable to sign out. Please try again.');\n      return { error };\n    }\n  };\n\n  useEffect(() => {\n    // Flag to track mounted state to prevent updates after unmount\n    let isMounted = true;\n    \n    console.log('Auth hook initializing');\n\n    const fetchUserProfile = async (userId: string) => {\n      if (!userId) {\n        setUserProfile(null);\n        setIsLoadingProfile(false);\n        return;\n      }\n      setIsLoadingProfile(true);\n      try {\n        const { data, error, status } = await supabase\n          .from('profiles')\n          .select(`id, role, username, avatar_url`)\n          .eq('id', userId)\n          .single();\n\n        if (error && status !== 406) { // 406: Not found, which is fine if profile not created yet\n          console.error('Error fetching user profile:', error);\n          toast.error('Error fetching user profile.');\n          setUserProfile(null);\n        } else if (data) {\n          setUserProfile(data as UserProfile);\n        } else {\n          setUserProfile(null); // No profile found or other non-error case\n        }\n      } catch (profileError) {\n        console.error('Exception fetching user profile:', profileError);\n        toast.error('Exception fetching user profile.');\n        setUserProfile(null);\n      } finally {\n        if (isMounted) {\n          setIsLoadingProfile(false);\n        }\n      }\n    };\n    \n    // First, setup the auth state change listener\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, currentSession) => {\n      console.log(`Auth state changed: ${event}`, currentSession?.user?.id || 'no session');\n      \n      if (isMounted) {\n        setSession(currentSession);\n        const currentUser = currentSession?.user ?? null;\n        setUser(currentUser);\n        \n        if (currentUser) {\n          await fetchUserProfile(currentUser.id);\n        } else {\n          setUserProfile(null);\n          setIsLoadingProfile(false); // Ensure loading profile is false when no user\n        }\n        setLoading(false); // Auth state settled\n      }\n    });\n    \n    // Then, get the initial session and profile\n    const getInitialSessionAndProfile = async () => {\n      try {\n        console.log(\"Checking for initial session...\");\n        setLoading(true); // Start loading for initial session check\n        const { data: { session: initialSession } } = await supabase.auth.getSession();\n        console.log(\"Initial session check:\", initialSession?.user?.id || 'no session');\n        \n        if (isMounted) {\n          setSession(initialSession);\n          const initialUser = initialSession?.user ?? null;\n          setUser(initialUser);\n\n          if (initialUser) {\n            await fetchUserProfile(initialUser.id);\n          } else {\n            setUserProfile(null);\n            setIsLoadingProfile(false);\n          }\n        }\n      } catch (error) {\n        console.error('Error getting initial session:', error);\n        if (isMounted) {\n          setUserProfile(null); // Clear profile on error\n          setIsLoadingProfile(false);\n        }\n      } finally {\n        if (isMounted) {\n          setLoading(false); // Initial auth check complete\n        }\n      }\n    };\n    \n    getInitialSessionAndProfile();\n    \n    // Clean up\n    return () => {\n      console.log('Auth hook cleanup');\n      isMounted = false;\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const getUserRole = useCallback((): string | null => {\n    if (isLoadingProfile || !userProfile) return null;\n    return userProfile.role ?? null;\n  }, [userProfile, isLoadingProfile]);\n\n  const hasRole = useCallback((roleOrRoles: string | string[]): boolean => {\n    if (isLoadingProfile || !userProfile || !userProfile.role) return false;\n    \n    const currentRole = userProfile.role;\n    if (typeof roleOrRoles === 'string') {\n      return currentRole === roleOrRoles;\n    }\n    if (Array.isArray(roleOrRoles)) {\n      return roleOrRoles.includes(currentRole);\n    }\n    return false;\n  }, [userProfile, isLoadingProfile]);\n\n  return {\n    user,\n    session,\n    userProfile,\n    loading, // This is for the initial auth user/session loading\n    isLoadingProfile, // This is specifically for profile data loading\n    signIn,\n    signUp,\n    signOut,\n    getUserRole,\n    hasRole,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/integrations/supabase/client.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":35,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":35,"endColumn":20,"suggestions":[{"fix":{"range":[1256,1306],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\n// This file is automatically generated. Do not edit it directly.\nimport { createClient } from '@supabase/supabase-js';\nimport type { Database } from './types';\n\nconst SUPABASE_URL = \"https://rjucdyyuowpebzbuixcu.supabase.co\";\nconst SUPABASE_PUBLISHABLE_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJqdWNkeXl1b3dwZWJ6YnVpeGN1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3MDc1MDcsImV4cCI6MjA2MDI4MzUwN30.sRGFEU2wgPArALac085pLDXO6oqwOFWDvOxr2EAdJ3A\";\n\n// Create a single Supabase client instance to avoid duplicate auth listeners\nexport const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  },\n  db: {\n    schema: 'public',\n  },\n  global: {\n    headers: {\n      'x-application-name': 'beatwave'\n    },\n  }\n});\n\n// Check if we have storage buckets initialized\nexport const initializeStorage = async () => {\n  try {\n    // Check if storage buckets exist, create if they don't\n    const { data: buckets } = await supabase.storage.listBuckets();\n    \n    const requiredBuckets = ['beats', 'images', 'remixes'];\n    for (const bucket of requiredBuckets) {\n      if (!buckets?.find(b => b.name === bucket)) {\n        console.log(`Creating storage bucket: ${bucket}`);\n        await supabase.storage.createBucket(bucket, {\n          public: true,\n          fileSizeLimit: 50 * 1024 * 1024 // 50MB limit\n        });\n      }\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Failed to initialize storage buckets:', error);\n    return false;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/integrations/supabase/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/lib/api/content.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/lib/api/dashboard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Beat' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Remix' is defined but never used.","line":4,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CoverArt' is defined but never used.","line":4,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\nimport { Beat, Remix, CoverArt } from '@/lib/api';\n\n/**\n * Dashboard API utilities for data fetching and CRUD operations\n */\n\n// Fetch dashboard statistics\nexport const fetchDashboardStats = async () => {\n  try {\n    const [beatsCount, remixesCount, coverArtCount, downloadsCount] = await Promise.all([\n      supabase.from('beats').select('id', { count: 'exact', head: true }),\n      supabase.from('remixes').select('id', { count: 'exact', head: true }),\n      supabase.from('cover_art').select('id', { count: 'exact', head: true }),\n      supabase.from('downloads').select('id', { count: 'exact', head: true })\n    ]);\n\n    return {\n      beatsCount: beatsCount.count || 0,\n      remixesCount: remixesCount.count || 0,\n      coverArtCount: coverArtCount.count || 0,\n      downloadsCount: downloadsCount.count || 0\n    };\n  } catch (error) {\n    console.error('Error fetching dashboard stats:', error);\n    toast.error('Failed to load dashboard statistics');\n    throw error;\n  }\n};\n\n// Fetch recent download activity\nexport const fetchRecentDownloads = async (limit = 10) => {\n  try {\n    const { data, error } = await supabase\n      .from('downloads')\n      .select(`\n        id, \n        item_id, \n        item_type, \n        created_at,\n        beats!inner(title, producer),\n        remixes!inner(title, remixer),\n        cover_art!inner(title, artist)\n      `)\n      .order('created_at', { ascending: false })\n      .limit(limit);\n\n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching recent downloads:', error);\n    toast.error('Failed to load recent download activity');\n    throw error;\n  }\n};\n\n// Fetch top downloaded content\nexport const fetchTopDownloads = async (limit = 5) => {\n  try {\n    const [topBeats, topRemixes, topCoverArt] = await Promise.all([\n      supabase\n        .from('beats')\n        .select('id, title, producer, downloads')\n        .order('downloads', { ascending: false })\n        .limit(limit),\n      supabase\n        .from('remixes')\n        .select('id, title, remixer, downloads')\n        .order('downloads', { ascending: false })\n        .limit(limit),\n      supabase\n        .from('cover_art')\n        .select('id, title, artist, downloads')\n        .order('downloads', { ascending: false })\n        .limit(limit)\n    ]);\n\n    return {\n      topBeats: topBeats.data || [],\n      topRemixes: topRemixes.data || [],\n      topCoverArt: topCoverArt.data || []\n    };\n  } catch (error) {\n    console.error('Error fetching top downloads:', error);\n    toast.error('Failed to load top downloaded content');\n    throw error;\n  }\n};\n\n// Search across all content types\nexport const searchContent = async (query: string) => {\n  try {\n    const [beats, remixes, coverArt] = await Promise.all([\n      supabase\n        .from('beats')\n        .select('*')\n        .or(`title.ilike.%${query}%,producer.ilike.%${query}%`)\n        .limit(10),\n      supabase\n        .from('remixes')\n        .select('*')\n        .or(`title.ilike.%${query}%,remixer.ilike.%${query}%,original_artist.ilike.%${query}%`)\n        .limit(10),\n      supabase\n        .from('cover_art')\n        .select('*')\n        .or(`title.ilike.%${query}%,artist.ilike.%${query}%`)\n        .limit(10)\n    ]);\n\n    return {\n      beats: beats.data || [],\n      remixes: remixes.data || [],\n      coverArt: coverArt.data || []\n    };\n  } catch (error) {\n    console.error('Error searching content:', error);\n    toast.error('Search failed');\n    throw error;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/app/src/lib/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1303,1306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1303,1306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1313,1316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1313,1316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\n/**\n * Combines class names using clsx and tailwind-merge\n * This allows for conditional classes and deduplication of tailwind classes\n * \n * @param inputs - Class values to be combined\n * @returns - Combined and optimized class string\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Formats a number as currency\n * \n * @param value - Number to format\n * @param currency - Currency code (default: 'USD')\n * @returns - Formatted currency string\n */\nexport function formatCurrency(value: number, currency = 'USD'): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency,\n  }).format(value)\n}\n\n/**\n * Safely truncates a string to a specified length\n * \n * @param str - String to truncate\n * @param length - Maximum length\n * @returns - Truncated string with ellipsis if needed\n */\nexport function truncate(str: string, length: number): string {\n  if (!str) return ''\n  return str.length > length ? `${str.substring(0, length)}...` : str\n}\n\n/**\n * Debounces a function call\n * \n * @param fn - Function to debounce\n * @param delay - Delay in milliseconds\n * @returns - Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  fn: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: ReturnType<typeof setTimeout>\n  \n  return function(...args: Parameters<T>): void {\n    clearTimeout(timeoutId)\n    timeoutId = setTimeout(() => fn(...args), delay)\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/About.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":37,"column":104,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1438,1704],"text":"\n              As a YouTube creator myself, I understood the challenge of finding good music that wouldn&apos;t \n              trigger copyright strikes. That's why I began creating beats and remixes specifically designed \n              for content creators.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1438,1704],"text":"\n              As a YouTube creator myself, I understood the challenge of finding good music that wouldn&lsquo;t \n              trigger copyright strikes. That's why I began creating beats and remixes specifically designed \n              for content creators.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1438,1704],"text":"\n              As a YouTube creator myself, I understood the challenge of finding good music that wouldn&#39;t \n              trigger copyright strikes. That's why I began creating beats and remixes specifically designed \n              for content creators.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1438,1704],"text":"\n              As a YouTube creator myself, I understood the challenge of finding good music that wouldn&rsquo;t \n              trigger copyright strikes. That's why I began creating beats and remixes specifically designed \n              for content creators.\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":38,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1438,1704],"text":"\n              As a YouTube creator myself, I understood the challenge of finding good music that wouldn't \n              trigger copyright strikes. That&apos;s why I began creating beats and remixes specifically designed \n              for content creators.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1438,1704],"text":"\n              As a YouTube creator myself, I understood the challenge of finding good music that wouldn't \n              trigger copyright strikes. That&lsquo;s why I began creating beats and remixes specifically designed \n              for content creators.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1438,1704],"text":"\n              As a YouTube creator myself, I understood the challenge of finding good music that wouldn't \n              trigger copyright strikes. That&#39;s why I began creating beats and remixes specifically designed \n              for content creators.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1438,1704],"text":"\n              As a YouTube creator myself, I understood the challenge of finding good music that wouldn't \n              trigger copyright strikes. That&rsquo;s why I began creating beats and remixes specifically designed \n              for content creators.\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":93,"column":81,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4229,4348],"text":"\n              Have questions about licensing, custom beats, or anything else? We&apos;d love to hear from you!\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4229,4348],"text":"\n              Have questions about licensing, custom beats, or anything else? We&lsquo;d love to hear from you!\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4229,4348],"text":"\n              Have questions about licensing, custom beats, or anything else? We&#39;d love to hear from you!\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4229,4348],"text":"\n              Have questions about licensing, custom beats, or anything else? We&rsquo;d love to hear from you!\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Mail, Youtube, Instagram, Twitter } from \"lucide-react\";\nimport AdBanner from \"@/components/common/AdBanner\";\nimport Header from \"@/components/layout/Header\";\nimport Footer from \"@/components/layout/Footer\";\n\nconst About = () => {\n  return (\n    <div className=\"min-h-screen\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"py-12 md:py-20 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"max-w-3xl mx-auto text-center\">\n            <h1 className=\"text-3xl md:text-5xl font-bold mb-6\">About BeatWave</h1>\n            <p className=\"text-lg md:text-xl text-muted-foreground mb-8\">\n              Free beats, remixes, and cover art for content creators worldwide. \n              Making music accessible for everyone.\n            </p>\n          </div>\n        </div>\n      </section>\n      \n      {/* Story Section */}\n      <section className=\"py-12 px-4 bg-secondary/30\">\n        <div className=\"container mx-auto\">\n          <div className=\"max-w-3xl mx-auto\">\n            <h2 className=\"text-2xl md:text-3xl font-bold mb-6\">Our Story</h2>\n            <p className=\"mb-4\">\n              BeatWave started with a simple idea: to provide high-quality music resources to content creators \n              without the barrier of expensive licensing fees.\n            </p>\n            <p className=\"mb-4\">\n              As a YouTube creator myself, I understood the challenge of finding good music that wouldn't \n              trigger copyright strikes. That's why I began creating beats and remixes specifically designed \n              for content creators.\n            </p>\n            <p>\n              Today, BeatWave offers hundreds of beats, remixes, and cover art designs for free download, \n              supported by our ad revenue model that keeps everything accessible while supporting our continued \n              creative work.\n            </p>\n          </div>\n        </div>\n      </section>\n      \n      <AdBanner type=\"content\" className=\"container mx-auto py-8\" />\n      \n      {/* How It Works Section */}\n      <section className=\"py-12 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"max-w-3xl mx-auto\">\n            <h2 className=\"text-2xl md:text-3xl font-bold mb-6\">How It Works</h2>\n            \n            <div className=\"space-y-8\">\n              <div className=\"bg-card border border-border p-6 rounded-lg\">\n                <h3 className=\"text-xl font-semibold mb-2\">1. Browse & Preview</h3>\n                <p className=\"text-muted-foreground\">\n                  Explore our extensive library of beats, remixes, and cover art. Use the filters to find \n                  exactly what you need for your project, and preview everything before downloading.\n                </p>\n              </div>\n              \n              <div className=\"bg-card border border-border p-6 rounded-lg\">\n                <h3 className=\"text-xl font-semibold mb-2\">2. Download</h3>\n                <p className=\"text-muted-foreground\">\n                  Choose your preferred download method: either view a short ad or subscribe to our newsletter. \n                  This helps support our work while keeping all content free for you.\n                </p>\n              </div>\n              \n              <div className=\"bg-card border border-border p-6 rounded-lg\">\n                <h3 className=\"text-xl font-semibold mb-2\">3. Create</h3>\n                <p className=\"text-muted-foreground\">\n                  Use our beats and art in your non-commercial content with proper attribution. We provide \n                  clear licensing information with each download so you know exactly how you can use the content.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      {/* Contact Section */}\n      <section className=\"py-12 px-4 bg-secondary/30\">\n        <div className=\"container mx-auto\">\n          <div className=\"max-w-3xl mx-auto text-center\">\n            <h2 className=\"text-2xl md:text-3xl font-bold mb-6\">Get In Touch</h2>\n            <p className=\"text-muted-foreground mb-8\">\n              Have questions about licensing, custom beats, or anything else? We'd love to hear from you!\n            </p>\n            \n            <div className=\"flex flex-wrap justify-center gap-4\">\n              <Button size=\"lg\" className=\"gap-2\">\n                <Mail size={18} />\n                Contact Us\n              </Button>\n              \n              <Button size=\"lg\" variant=\"outline\" className=\"gap-2\">\n                <Youtube size={18} />\n                YouTube\n              </Button>\n              \n              <Button size=\"lg\" variant=\"outline\" className=\"gap-2\">\n                <Instagram size={18} />\n                Instagram\n              </Button>\n              \n              <Button size=\"lg\" variant=\"outline\" className=\"gap-2\">\n                <Twitter size={18} />\n                Twitter\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      <Footer />\n    </div>\n  );\n};\n\nexport default About;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Auth.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":22,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":22,"endColumn":16,"suggestions":[{"fix":{"range":[962,1051],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":26,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":26,"endColumn":18,"suggestions":[{"fix":{"range":[1177,1249],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { useAuthContext } from \"@/context/AuthContext\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport LoginForm from \"@/components/auth/LoginForm\";\nimport SignUpForm from \"@/components/auth/SignUpForm\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Loader2 } from \"lucide-react\";\n\nexport default function Auth() {\n  const [activeTab, setActiveTab] = useState<\"login\" | \"signup\">(\"login\");\n  const { user, loading } = useAuthContext();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [redirecting, setRedirecting] = useState(false);\n  \n  // Get the intended destination from location state, or default to dashboard\n  const from = (location.state as { from?: { pathname: string } })?.from?.pathname || \"/dashboard\";\n  \n  useEffect(() => {\n    console.log(`Auth page: user=${!!user}, loading=${loading}, redirecting=${redirecting}`);\n    \n    // Only redirect if user is authenticated and loading is complete\n    if (user && !loading && !redirecting) {\n      console.log(\"Auth: User is authenticated, preparing redirect to\", from);\n      setRedirecting(true);\n      navigate(from, { replace: true });\n    }\n  }, [user, loading, navigate, from, redirecting]);\n\n  // Show loading indicator during auth check\n  if (loading) {\n    return (\n      <div className=\"flex h-screen w-full items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        <span className=\"ml-2\">Checking authentication status...</span>\n      </div>\n    );\n  }\n\n  // If we're authenticated or in the process of redirecting, show a loading spinner\n  if (user || redirecting) {\n    return (\n      <div className=\"flex h-screen w-full items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        <span className=\"ml-2\">Redirecting to dashboard...</span>\n      </div>\n    );\n  }\n\n  // Only show auth forms if not authenticated and not redirecting\n  return (\n    <div className=\"container flex items-center justify-center min-h-screen py-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl text-center\">Welcome</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as \"login\" | \"signup\")}>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\">Login</TabsTrigger>\n              <TabsTrigger value=\"signup\">Sign Up</TabsTrigger>\n            </TabsList>\n            <TabsContent value=\"login\">\n              <LoginForm redirectPath={from} />\n            </TabsContent>\n            <TabsContent value=\"signup\">\n              <SignUpForm />\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Beats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/CoverArt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Dashboard.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":43,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":43,"endColumn":14,"suggestions":[{"fix":{"range":[1606,1691],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":58,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":58,"endColumn":16,"suggestions":[{"fix":{"range":[2182,2261],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useAuthContext } from \"@/context/AuthContext\";\nimport DashboardLayout from \"@/components/dashboard/DashboardLayout\";\nimport DashboardOverview from \"@/components/dashboard/DashboardOverview\";\nimport DashboardUsers from \"@/components/dashboard/DashboardUsers\";\nimport DashboardContent from \"@/components/dashboard/DashboardContent\";\nimport DashboardUploads from \"@/components/dashboard/DashboardUploads\";\nimport DashboardSettings from \"@/components/dashboard/DashboardSettings\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2 } from 'lucide-react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport APIErrorBoundary from \"@/components/common/APIErrorBoundary\";\n\n// Create a client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n      retry: 1,\n      staleTime: 60000, // 1 minute\n    },\n  },\n});\n\nconst Dashboard = () => {\n  const { user, loading } = useAuthContext();\n  const location = useLocation();\n  const navigate = useNavigate();\n  \n  // Extract tab from URL parameters or default to \"overview\"\n  const urlParams = new URLSearchParams(location.search);\n  const defaultTab = urlParams.get('tab') || 'overview';\n  const [activeTab, setActiveTab] = useState(defaultTab);\n  \n  const handleTabChange = (value: string) => {\n    setActiveTab(value);\n    // Update URL with the selected tab\n    navigate(`/dashboard?tab=${value}`, { replace: true });\n  };\n  \n  console.log(`Dashboard: user=${!!user}, loading=${loading}, activeTab=${activeTab}`);\n\n  // Show loading spinner while authentication state is being determined\n  if (loading) {\n    return (\n      <div className=\"flex h-screen w-full items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        <span className=\"ml-2\">Loading dashboard...</span>\n      </div>\n    );\n  }\n  \n  // The RequireAuth component in App.tsx should handle redirection if user is not authenticated\n  // This is just an additional safety check\n  if (!user) {\n    console.log(\"Dashboard: No user found, this should be handled by RequireAuth\");\n    return null;\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <APIErrorBoundary fallbackMessage=\"Failed to load dashboard\">\n        <DashboardLayout>\n          <Tabs value={activeTab} onValueChange={handleTabChange} className=\"w-full\">\n            <TabsList className=\"mb-6 border-b w-full justify-start rounded-none gap-6 px-0 h-auto pb-4\">\n              <TabsTrigger value=\"overview\" className=\"data-[state=active]:shadow-none text-md\">Overview</TabsTrigger>\n              <TabsTrigger value=\"users\" className=\"data-[state=active]:shadow-none text-md\">User Insights</TabsTrigger>\n              <TabsTrigger value=\"content\" className=\"data-[state=active]:shadow-none text-md\">Content Management</TabsTrigger>\n              <TabsTrigger value=\"uploads\" className=\"data-[state=active]:shadow-none text-md\">Upload Management</TabsTrigger>\n              <TabsTrigger value=\"settings\" className=\"data-[state=active]:shadow-none text-md\">Settings</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\">\n              <DashboardOverview />\n            </TabsContent>\n\n            <TabsContent value=\"users\">\n              <DashboardUsers />\n            </TabsContent>\n\n            <TabsContent value=\"content\">\n              <DashboardContent />\n            </TabsContent>\n\n            <TabsContent value=\"uploads\">\n              <DashboardUploads />\n            </TabsContent>\n\n            <TabsContent value=\"settings\">\n              <DashboardSettings />\n            </TabsContent>\n          </Tabs>\n        </DashboardLayout>\n      </APIErrorBoundary>\n    </QueryClientProvider>\n  );\n};\n\nexport default Dashboard;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'genres' is assigned a value but never used.","line":44,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Music, Disc3, Image, ArrowRight } from \"lucide-react\";\nimport { Link } from \"react-router-dom\";\nimport BeatCard from \"@/components/beats/BeatCard\";\nimport RemixCard from \"@/components/remixes/RemixCard\";\nimport AdBanner from \"@/components/common/AdBanner\";\nimport Header from \"@/components/layout/Header\";\nimport Footer from \"@/components/layout/Footer\";\nimport { fetchBeats, fetchRemixes } from \"@/lib/api\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport ErrorBoundary from \"@/components/common/ErrorBoundary\";\nimport ContentSection from \"@/components/common/ContentSection\";\n\nconst Index = () => {\n  const [featuredBeats, setFeaturedBeats] = useState([]);\n  const [featuredRemixes, setFeaturedRemixes] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadFeaturedContent = async () => {\n      try {\n        setLoading(true);\n        const [beatsData, remixesData] = await Promise.all([\n          fetchBeats(),\n          fetchRemixes()\n        ]);\n        \n        // Get up to 4 latest beats and remixes\n        setFeaturedBeats(beatsData.slice(0, 4));\n        setFeaturedRemixes(remixesData.slice(0, 4));\n      } catch (error) {\n        console.error(\"Failed to load featured content:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadFeaturedContent();\n  }, []);\n\n  // List of genres with their corresponding icons and colors\n  const genres = [{\n    name: \"Hip Hop\",\n    icon: <Music size={24} />,\n    color: \"bg-beatwave-500\"\n  }, {\n    name: \"Chill\",\n    icon: <Music size={24} />,\n    color: \"bg-blue-500\"\n  }, {\n    name: \"Techno\",\n    icon: <Music size={24} />,\n    color: \"bg-purple-500\"\n  }, {\n    name: \"Soul\",\n    icon: <Music size={24} />,\n    color: \"bg-amber-500\"\n  }, {\n    name: \"Funk\",\n    icon: <Music size={24} />,\n    color: \"bg-green-500\"\n  }, {\n    name: \"Jazz\",\n    icon: <Music size={24} />,\n    color: \"bg-pink-500\"\n  }];\n  \n  // Loading skeleton for cards\n  const CardSkeleton = () => (\n    <div className=\"flex flex-col space-y-3\">\n      <Skeleton className=\"h-48 w-full rounded-md\" />\n      <Skeleton className=\"h-4 w-3/4\" />\n      <Skeleton className=\"h-4 w-1/2\" />\n      <Skeleton className=\"h-10 w-full\" />\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen\">\n      <ErrorBoundary>\n        <Header />\n      </ErrorBoundary>\n      \n      {/* Hero Section - Improved for accessibility and performance */}\n      <ErrorBoundary>\n        <section \n          className=\"py-12 md:py-24 px-4 relative\" \n          style={{\n            backgroundImage: \"url('/lovable-uploads/8e577b0f-aefc-4105-8149-88d723a4d42e.png')\",\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n          }}\n          role=\"banner\"\n          aria-label=\"BeatWave - Free Beats & Remixes\"\n        >\n          <div className=\"absolute inset-0 bg-black/50\"></div>\n          <div className=\"container mx-auto relative z-10\">\n            <AdBanner type=\"header\" className=\"mb-8\" />\n            \n            <div className=\"max-w-4xl mx-auto text-center\">\n              <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-bold mb-6 bg-gradient-to-r from-beatwave-400 to-beatwave-600 bg-clip-text text-transparent\">\n                Free Beats & Remixes for Content Creators\n              </h1>\n              <p className=\"text-xl text-white mb-8 max-w-2xl mx-auto\">\n                Download high-quality royalty-free beats, remixes, and cover art for your videos, podcasts, and creative projects.\n              </p>\n              <div className=\"flex flex-wrap gap-4 justify-center\">\n                <Button asChild size=\"lg\" className=\"gap-2\">\n                  <Link to=\"/beats\">\n                    <Music size={20} aria-hidden=\"true\" />\n                    <span>Browse Beats</span>\n                  </Link>\n                </Button>\n                <Button asChild size=\"lg\" variant=\"outline\" className=\"gap-2\">\n                  <Link to=\"/remixes\">\n                    <Disc3 size={20} aria-hidden=\"true\" />\n                    <span>Explore Remixes</span>\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </section>\n      </ErrorBoundary>\n      \n      {/* Featured Beats Section - With Error Boundary */}\n      <ContentSection className=\"py-12 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <h2 className=\"text-2xl md:text-3xl font-bold\">Featured Beats</h2>\n            <Button variant=\"ghost\" asChild className=\"gap-1\">\n              <Link to=\"/beats\">\n                <span>View All</span>\n                <ArrowRight size={16} aria-hidden=\"true\" />\n              </Link>\n            </Button>\n          </div>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6\">\n            {loading ? (\n              Array(4).fill(0).map((_, i) => (\n                <CardSkeleton key={`beat-skeleton-${i}`} />\n              ))\n            ) : featuredBeats.length > 0 ? (\n              featuredBeats.map(beat => (\n                <BeatCard \n                  key={beat.id} \n                  id={beat.id} \n                  title={beat.title} \n                  producer={beat.producer} \n                  image={beat.image_url} \n                  audio={beat.audio_url} \n                  bpm={beat.bpm}\n                  key_signature={beat.key}\n                  tags={Array.isArray(beat.tags) ? beat.tags : []}\n                />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center text-muted-foreground py-12\">\n                No beats available at the moment. Check back soon!\n              </div>\n            )}\n          </div>\n\n          <AdBanner type=\"content\" className=\"my-12\" />\n        </div>\n      </ContentSection>\n      \n      {/* Featured Remixes Section - With Error Boundary */}\n      <ContentSection className=\"py-12 px-4 bg-secondary/30\">\n        <div className=\"container mx-auto\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <h2 className=\"text-2xl md:text-3xl font-bold\">Latest Remixes</h2>\n            <Button variant=\"ghost\" asChild className=\"gap-1\">\n              <Link to=\"/remixes\">\n                <span>View All</span>\n                <ArrowRight size={16} aria-hidden=\"true\" />\n              </Link>\n            </Button>\n          </div>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6\">\n            {loading ? (\n              Array(4).fill(0).map((_, i) => (\n                <CardSkeleton key={`remix-skeleton-${i}`} />\n              ))\n            ) : featuredRemixes.length > 0 ? (\n              featuredRemixes.map(remix => (\n                <RemixCard \n                  key={remix.id} \n                  id={remix.id}\n                  title={remix.title}\n                  remixer={remix.remixer}\n                  originalArtist={remix.original_artist}\n                  youtubeId={remix.youtube_id}\n                  tags={Array.isArray(remix.tags) ? remix.tags : []}\n                />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center text-muted-foreground py-12\">\n                No remixes available at the moment. Check back soon!\n              </div>\n            )}\n          </div>\n        </div>\n      </ContentSection>\n      \n      {/* Cover Art Teaser - With Error Boundary */}\n      <ContentSection className=\"py-12 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n            <div className=\"flex flex-col md:flex-row items-center\">\n              <div className=\"w-full md:w-1/2\">\n                <img \n                  src=\"/lovable-uploads/a7fff71b-527c-4120-8fec-0607c49ea7c9.png\" \n                  alt=\"Cover Art Collection\" \n                  className=\"w-full h-full object-cover aspect-square md:aspect-auto\"\n                  loading=\"lazy\" // Performance optimization\n                />\n              </div>\n              <div className=\"p-6 md:p-12 w-full md:w-1/2\">\n                <h2 className=\"text-2xl md:text-3xl font-bold mb-4\">\n                  Professional Cover Art\n                </h2>\n                <p className=\"text-muted-foreground mb-6\">\n                  Make your music stand out with our collection of high-quality cover art. \n                  Perfect for your singles, albums, playlists, and social media.\n                </p>\n                <Button asChild className=\"gap-2\">\n                  <Link to=\"/cover-art\">\n                    <Image size={20} aria-hidden=\"true\" />\n                    <span>Browse Gallery</span>\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ContentSection>\n      \n      <ErrorBoundary>\n        <Footer />\n      </ErrorBoundary>\n    </div>\n  );\n};\n\nexport default Index;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/NotFound.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'react-router-dom' import is duplicated.","line":6,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":6,"endColumn":41},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":24,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[788,893],"text":"\n          We couldn&apos;t find the page you were looking for. The beat might have dropped too hard.\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[788,893],"text":"\n          We couldn&lsquo;t find the page you were looking for. The beat might have dropped too hard.\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[788,893],"text":"\n          We couldn&#39;t find the page you were looking for. The beat might have dropped too hard.\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[788,893],"text":"\n          We couldn&rsquo;t find the page you were looking for. The beat might have dropped too hard.\n        "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Home } from \"lucide-react\";\nimport { Link } from \"react-router-dom\";\n\nconst NotFound = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background px-4\">\n      <div className=\"text-center max-w-md\">\n        <h1 className=\"text-6xl font-bold mb-4 text-beatwave-500\">404</h1>\n        <p className=\"text-xl text-foreground mb-6\">Oops! Beat not found</p>\n        <p className=\"text-lg text-muted-foreground mb-8\">\n          We couldn't find the page you were looking for. The beat might have dropped too hard.\n        </p>\n        <Button asChild size=\"lg\" className=\"gap-2\">\n          <Link to=\"/\">\n            <Home size={18} />\n            Return to Home\n          </Link>\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Remixes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/types/database.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/list-users-with-roles/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/list-users/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/record-download/index.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":50,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":50,"endColumn":16,"suggestions":[{"fix":{"range":[1443,1521],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\"\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.4\"\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n}\n\ninterface RecordDownloadPayload {\n  itemId: string;\n  itemType: 'beat' | 'remix' | 'cover_art';\n  email?: string;\n  userAgent?: string;\n}\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    // Get authorization header\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) {\n      return new Response(\n        JSON.stringify({ error: 'Missing Authorization header' }),\n        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 401 }\n      );\n    }\n\n    // Create Supabase client\n    const supabaseClient = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? '',\n      {\n        global: {\n          headers: { Authorization: authHeader },\n        },\n      }\n    );\n\n    // Get client IP address from request headers\n    const ipAddress = req.headers.get('x-forwarded-for')?.split(',')[0] || 'unknown';\n    \n    // Parse request body\n    const { itemId, itemType, email, userAgent } = await req.json() as RecordDownloadPayload;\n    \n    console.log(`Recording download for ${itemType} ${itemId} from ${ipAddress}`);\n    \n    // First, fetch the current downloads count\n    const tableName = itemType === 'beat' ? 'beats' : \n                      itemType === 'remix' ? 'remixes' : 'cover_art';\n    \n    const { data: itemData, error: fetchError } = await supabaseClient\n      .from(tableName)\n      .select('downloads')\n      .eq('id', itemId)\n      .single();\n\n    if (fetchError) {\n      console.error(`Error fetching current download count:`, fetchError);\n      return new Response(\n        JSON.stringify({ error: fetchError.message }),\n        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }\n      );\n    }\n\n    // Then update with incremented value\n    const currentDownloads = itemData?.downloads || 0;\n    const { error: updateError } = await supabaseClient\n      .from(tableName)\n      .update({ downloads: currentDownloads + 1 })\n      .eq('id', itemId);\n\n    if (updateError) {\n      console.error(`Error incrementing download count:`, updateError);\n      return new Response(\n        JSON.stringify({ error: updateError.message }),\n        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }\n      );\n    }\n\n    // Then record the download in the downloads table with the captured IP\n    const { error } = await supabaseClient\n      .from('downloads')\n      .insert({\n        item_id: itemId,\n        item_type: itemType,\n        email: email,\n        user_agent: userAgent,\n        ip_address: ipAddress\n      });\n\n    if (error) {\n      console.error('Error recording download:', error);\n      return new Response(\n        JSON.stringify({ error: error.message }),\n        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }\n      );\n    }\n\n    return new Response(\n      JSON.stringify({ success: true }),\n      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 200 }\n    );\n\n  } catch (error) {\n    console.error('Download recording failed:', error);\n    return new Response(\n      JSON.stringify({ error: error.message }),\n      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }\n    );\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"/app/supabase/functions/setup-data/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]